LinkLuaModifier("modifier_alchemist_4_buff_target", "abilities/tower/alchemist/alchemist_4.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_alchemist_4_buff_caster", "abilities/tower/alchemist/alchemist_4.lua", LUA_MODIFIER_MOTION_NONE)

--- @class alchemist_4:EOM_AbilityBaseClass
alchemist_4 = EOM_Ability({})
function alchemist_4:GetAbilityTextureName()
	return AssetModifiers:GetAbilityTextureReplacement(self.BaseClass.GetAbilityTextureName(self), self:GetCaster())
end
function alchemist_4:CastFilterResultTarget(hTarget)
	local hCaster = self:GetCaster()
	local iPlayerID = hCaster:GetPlayerOwnerID()
	local gold_cost = self:GetSpecialValueFor("gold_cost")
	local iPlayerGold = 0
	if IsServer() then
		if not hTarget:IsBuilding() then
			self.error = "dota_hud_error_only_can_cast_on_building"
			return UF_FAIL_CUSTOM
		end
		iPlayerGold = PlayerData:GetGold(iPlayerID)
	else
		iPlayerGold = PlayerDataClient:GetGold(iPlayerID)
	end
	if iPlayerGold < gold_cost then
		self.error = "DOTA_Hud_NeedMoreGold"
		return UF_FAIL_CUSTOM
	end
	return self.BaseClass.CastFilterResultTarget(self, hTarget)
end
function alchemist_4:OnSpellStart()
	local hCaster = self:GetCaster()
	local hTarget = self:GetCursorTarget()
	local iPlayerID = hCaster:GetPlayerOwnerID()
	local gold_cost = self:GetSpecialValueFor("gold_cost")
	local cd = self:GetSpecialValueFor("cd")

	if PlayerData:GetGold(iPlayerID) >= gold_cost then
		hCaster:EmitSound(AssetModifiers:GetSoundReplacement("Hero_Alchemist.UnstableConcoction.Throw", hCaster))

		ProjectileManager:CreateTrackingProjectile({
			Ability = self,
			vSourceLoc = hCaster:GetAttachmentOrigin(hCaster:ScriptLookupAttachment("attach_attack3")),
			iMoveSpeed = 900,
			EffectName = "particles/units/heroes/hero_alchemist/alchemist_berserk_potion_projectile.vpcf",
			Target = hTarget,
		})
		PlayerData:ModifyGold(iPlayerID, -gold_cost)
		self:StartCooldown(cd)
	end
end
function alchemist_4:OnProjectileHit(hTarget, vLocation)
	local hCaster = self:GetCaster()

	EmitSoundOn(AssetModifiers:GetSoundReplacement("Hero_Alchemist.UnstableConcoction.Stun", hCaster), hTarget)
	hTarget:AddNewModifier(hCaster, self, "modifier_alchemist_4_buff_target", nil)
	hCaster:AddNewModifier(hCaster, self, "modifier_alchemist_4_buff_caster", nil)
end
--=======================================modifier_alchemist_4_buff_target=======================================
--- @class modifier_alchemist_4_buff_target:eom_modifier
modifier_alchemist_4_buff_target = eom_modifier({
	GetTexture = "modifier_bonus_health",
	IsHidden = false,
	IsPurgable = false,
	IsPurgeException = false,
})
function modifier_alchemist_4_buff_target:OnCreated(params)
	self.bonus_all = self:GetAbilitySpecialValueFor("bonus_all")
	if IsServer() then
		self:ModifyStackCount(self.bonus_all)
	end
end
function modifier_alchemist_4_buff_target:OnRefresh(params)
	self.bonus_all = self:GetAbilitySpecialValueFor("bonus_all")
	if IsServer() then
		self:ModifyStackCount(self.bonus_all)
	end
end
function modifier_alchemist_4_buff_target:EDeclareFunctions()
	return {
		EOM_MODIFIER_PROPERTY_STATS_ALL_BONUS,
	}
end
function modifier_alchemist_4_buff_target:EOM_GetModifierBonusStats_All()
	return self:GetStackCount()
end
function modifier_alchemist_4_buff_target:DeclareFunctions()
	return {
		MODIFIER_PROPERTY_TOOLTIP,
	}
end
function modifier_alchemist_4_buff_target:OnTooltip()
	return self:GetStackCount()
end
--=======================================modifier_alchemist_4_buff_caster=======================================
--- @class modifier_alchemist_4_buff_caster:eom_modifier
modifier_alchemist_4_buff_caster = eom_modifier({
	IsHidden = false,
	IsPurgable = false,
	IsPurgeException = false,
})
function modifier_alchemist_4_buff_caster:OnCreated(params)
	self.spell_amp_stack = self:GetAbilitySpecialValueFor("spell_amp_stack")
	if IsServer() then
		self:ModifyStackCount(self.spell_amp_stack)
	end
end
function modifier_alchemist_4_buff_caster:OnRefresh(params)
	self.spell_amp_stack = self:GetAbilitySpecialValueFor("spell_amp_stack")
	if IsServer() then
		self:ModifyStackCount(self.spell_amp_stack)
	end
end
function modifier_alchemist_4_buff_caster:EDeclareFunctions()
	return {
		EOM_MODIFIER_PROPERTY_SPELL_AMPLIFY_BONUS,
	}
end
function modifier_alchemist_4_buff_caster:EOM_GetModifierSpellAmplifyBonus()
	return self:GetStackCount()
end
function modifier_alchemist_4_buff_caster:DeclareFunctions()
	return {
		MODIFIER_PROPERTY_TOOLTIP,
	}
end
function modifier_alchemist_4_buff_caster:OnTooltip()
	return self:GetStackCount()
end