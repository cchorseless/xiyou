-- 额外基础攻击力
function GetBaseBonusDamage(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE, tParams)
end
-- 物理防御
function GetBasePhysicalArmor(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE)
end
function GetBonusPhysicalArmor(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS)
end
function GetBasePhysicalArmorPercentage(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE)
end
function GetPhysicalArmorPercentage(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_PHYSICAL_ARMOR_PERCENTAGE)
end
function GetPhysicalArmor(hUnit)
	local fTotalPercent = GetPhysicalArmorPercentage(hUnit) * 0.01 -- 不要调用两遍
	return GetBasePhysicalArmor(hUnit) * (1 + GetBasePhysicalArmorPercentage(hUnit) * 0.01 + fTotalPercent) + GetBonusPhysicalArmor(hUnit) * (1 + fTotalPercent)
end
function GetIgnorePhysicalArmorPercentage(hUnit, tParams)
	return SubtractionMultiplicationPercentage(GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR_PERCENTAGE, tParams), GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR_PERCENTAGE_UNIQUE, tParams))
end
function GetIgnorePhysicalArmorPercentageTarget(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR_PERCENTAGE_TARGET, tParams)
end
function GetPhysicalReduction(hUnit, tParams)
	local fValue = GetPhysicalArmor(hUnit)
	-- 负甲的时候不计算无视护甲
	if fValue > 0 then
		local fIgnore = GetIgnorePhysicalArmorPercentageTarget(hUnit, tParams) -- 自身被百分比无视护甲
		if tParams and IsValid(tParams.attacker) then
			fValue = math.max(0, fValue - GetModifierProperty(tParams.attacker, EOM_MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR_CONSTANT, tParams))
			fIgnore = SubtractionMultiplicationPercentage(fIgnore, GetIgnorePhysicalArmorPercentage(tParams.attacker, tParams))
		end
		fValue = fValue - math.max(fValue * fIgnore * 0.01, 0)
	end
	return PHYSICAL_ARMOR_FACTOR * fValue / (1 + PHYSICAL_ARMOR_FACTOR * math.abs(fValue))
end
-- 魔法防御
function GetBaseMagicalArmor(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MAGICAL_ARMOR_BASE)
end
function GetBonusMagicalArmor(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MAGICAL_ARMOR_BONUS)
end
function GetBaseMagicalArmorPercentage(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MAGICAL_ARMOR_BASE_PERCENTAGE)
end
function GetMagicalArmorPercentage(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MAGICAL_ARMOR_PERCENTAGE)
end
function GetMagicalArmor(hUnit)
	return GetBaseMagicalArmor(hUnit) * (1 + GetBaseMagicalArmorPercentage(hUnit) * 0.01 + GetMagicalArmorPercentage(hUnit) * 0.01) + GetBonusMagicalArmor(hUnit) * (1 + GetMagicalArmorPercentage(hUnit) * 0.01)
end
function GetIgnoreMagicalArmorPercentage(hUnit, tParams)
	return SubtractionMultiplicationPercentage(GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_IGNORE_MAGICAL_ARMOR_PERCENTAGE, tParams), GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_IGNORE_MAGICAL_ARMOR_PERCENTAGE_UNIQUE, tParams))
end
function GetIgnoreMagicalArmorConstant(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_IGNORE_MAGICAL_ARMOR_CONSTANT, tParams)
end
function GetIgnoreMagicalArmorPercentageTarget(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_IGNORE_MAGICAL_ARMOR_PERCENTAGE_TARGET, tParams)
end
function GetMagicalReduction(hUnit, tParams)
	local fValue = GetMagicalArmor(hUnit)
	-- 负甲的时候不计算无视护甲
	if fValue > 0 then
		local fIgnore = GetIgnoreMagicalArmorPercentageTarget(hUnit, tParams) -- 自身的被百分比无视护甲
		if tParams and IsValid(tParams.attacker) then
			fValue = fValue - math.min(GetIgnoreMagicalArmorConstant(tParams.attacker, tParams), fValue)
			fIgnore = SubtractionMultiplicationPercentage(fIgnore, GetIgnoreMagicalArmorPercentage(tParams.attacker, tParams))
		end
		fValue = fValue - math.max(fValue * fIgnore * 0.01, 0)
	end

	return MAGICAL_ARMOR_FACTOR * fValue / (1 + MAGICAL_ARMOR_FACTOR * math.abs(fValue))
end
-- 技能增强
function GetBaseSpellAmplify(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_AMPLIFY_BASE, tParams)
end
function GetBonusSpellAmplify(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_AMPLIFY_BONUS, tParams)
end
function GetBonusSpellAmplifyUnique(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_AMPLIFY_BONUS_UNIQUE, tParams)
end
function GetSpellAmplify(hUnit, tParams)
	return GetBaseSpellAmplify(hUnit, tParams) + GetBonusSpellAmplify(hUnit, tParams) + GetBonusSpellAmplifyUnique(hUnit, tParams)
end
-- 生命值
function GetHealthBonus(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_HEALTH_BONUS)
end
function GetHealthPercentage(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_HEALTH_PERCENTAGE)
end
function GetHealthPercentageEnemy(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_HEALTH_PERCENT_ENEMY)
end
-- 生命恢复
function GetHealthRegen(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT)
end
-- 魔法值
function GetManaBonus(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MANA_BONUS)
end
function GetManaPercentage(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MANA_PERCENTAGE)
end
function GetBaseMana(hUnit)
	local fValue = 0
	if hUnit ~= nil then
		if IsValid(hUnit) and hUnit._StatusMana == nil then
			local sUnitName = hUnit:GetUnitName()
			local tData = hUnit:IsHero() and KeyValues.HeroesKv[sUnitName] or KeyValues.UnitsKv[sUnitName]
			if tData then
				hUnit._StatusMana = tonumber(tData.StatusMana) or 0
			end
		end
		if hUnit._StatusMana ~= nil then
			fValue = hUnit._StatusMana
		end
	end
	return fValue
end
function GetTotalManaBonus(hUnit)
	local fPercent = GetManaPercentage(hUnit) * 0.01
	return GetManaBonus(hUnit) * (1 + fPercent) + GetBaseMana(hUnit) * fPercent
end
-- 魔法恢复
function GetManaRegen(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MANA_REGEN_CONSTANT) + GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE)
end

function GetManaRegenAmplify(hUnit, params)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE, params)
end

function GetManaRegenTotal(hUnit)
	return (hUnit:GetStatusManaRegen() + GetManaRegen(hUnit)) * (1 + GetManaRegenAmplify(hUnit) / 100)
end
-- 状态抗性
function GetStatusResistanceStack(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING)
end
function GetStatusResistanceUnique(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_STATUS_RESISTANCE_UNIQUE)
end
function GetStatusResistance(hUnit)
	return (1 - (1 - GetStatusResistanceStack(hUnit) * 0.01) * (1 - GetStatusResistanceUnique(hUnit) * 0.01)) * 100
end
function GetStatusResistanceCaster(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER)
end
-- 闪避
function GetEvasion(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_EVASION_CONSTANT, tParams)
end
-- 技能闪避
function GetSpellEvasion(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_EVASION, tParams)
end
-- 冷却减少
function GetCooldownReduction(hUnit, tParams)
	local cd_reduction = GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE, tParams)
	local max_cd_reduction = GetMaxCooldownReduction(hUnit, tParams)
	if max_cd_reduction > 0 and max_cd_reduction < cd_reduction then
		return max_cd_reduction
	end
	return cd_reduction
end
function GetMaxCooldownReduction(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MAX_COOLDOWN_PERCENTAGE, tParams)
end
-- 物理暴击
function GetCriticalStrikeChance(hUnit, tParams)
	if GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_NO_CRITICALSTRIKE, tParams) >= 1 then
		return 0
	end
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_CRITICALSTRIKE_CHANCE, tParams) + BASE_ATTACK_CRITICALSTRIKE_CHANCE
end
-- 物理暴击伤害
function GetCriticalStrikeDamage(hUnit, tParams)
	local fDamage = BASE_ATTACK_CRITICALSTRIKE_DAMAGE + GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_CRITICALSTRIKE_DAMAGE, tParams)
	if tParams and IsValid(tParams.target) then
		fDamage = fDamage + GetModifierProperty(tParams.target, EOM_MODIFIER_PROPERTY_INCOMING_CRITICALSTRIKE_DAMAGE_CONSTANT, tParams)
	end
	local fPercent = GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_CRITICALSTRIKE_DAMAGE_TOTAL, tParams)
	return fDamage * (1 + fPercent / 100)
end
--物理暴击时技能暴击补偿
function GetCriticalStrikeDamage_Mix(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_CRITICALSTRIKE_MIX_PERCENT, tParams) * 0.01  * GetSpellCriticalStrikeDamage(hUnit, tParams)
end
-- 技能暴击概率
function GetSpellCriticalStrikeChance(hUnit, tParams)
	if GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_NO_SPELL_CRITICALSTRIKE, tParams) >= 1 then
		return 0
	end
	local fChance = GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_CRITICALSTRIKE_CHANCE, tParams) + BASE_SPELL_CRITICALSTRIKE_CHANCE
	if tParams and IsValid(tParams.target) then
		fChance = fChance + GetModifierProperty(tParams.target, EOM_MODIFIER_PROPERTY_SPELL_CRITICALSTRIKE_CHANCE_TARGET, tParams)
	end
	return fChance
end
-- 技能暴击伤害
function GetSpellCriticalStrikeDamage(hUnit, tParams)
	local fDamage = BASE_SPELL_CRITICALSTRIKE_DAMAGE + GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_CRITICALSTRIKE_DAMAGE)
	if tParams and IsValid(tParams.target) then
		fDamage = fDamage + GetModifierProperty(tParams.target, EOM_MODIFIER_PROPERTY_INCOMING_SPELL_CRITICALSTRIKE_DAMAGE_CONSTANT, tParams)
	end
	local fPercent = GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_CRITICALSTRIKE_DAMAGE_TOTAL, tParams)
	return fDamage * (1 + fPercent / 100)
end
--技能暴击时物理暴击补偿
function GetSpellCriticalStrikeDamage_Mix(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_SPELL_CRITICALSTRIKE_MIX_PERCENT, tParams) * 0.01  * GetCriticalStrikeDamage(hUnit, tParams)
end
-- 最大攻击速度
function GetBonusMaximumAttackSpeed(hUnit)
	if GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MAX_ATTACKSPEED_BONUS_UNABLE) >= 1 then
		return 0
	end
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_MAX_ATTACKSPEED_BONUS)
end
function GetMaximumAttackSpeed(hUnit)
	return GetBonusMaximumAttackSpeed(hUnit) + MAXIMUM_ATTACK_SPEED
end
function GetOutgoingDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_OUTGOING_DAMAGE_PERCENTAGE, tParams)
end
function GetOutgoingPhysicalDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_OUTGOING_PHYSICAL_DAMAGE_PERCENTAGE, tParams)
end
function GetOutgoingMagicalDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_OUTGOING_MAGICAL_DAMAGE_PERCENTAGE, tParams)
end
function GetOutgoingPureDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_OUTGOING_PURE_DAMAGE_PERCENTAGE, tParams)
end
-- 受到的伤害
function GetIncomingDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE, tParams)
end
function GetIncomingPhysicalDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE, tParams)
end
function GetIncomingMagicalDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_INCOMING_MAGICAL_DAMAGE_PERCENTAGE, tParams)
end
function GetIncomingPureDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_INCOMING_PURE_DAMAGE_PERCENTAGE, tParams)
end
function GetIncomingDamagePercentEnemy(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE_ENEMY, tParams)
end
--毒伤害相关
function GetIncomingPoisonDamagePercent(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_INCOMING_POISON_DAMAGE_PERCENTAGE, tParams)
end
function GetOutgoingPoisonCountPercent(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_OUTGOING_POISON_COUNT_PERCENTAGE)
end
function GetIncomingPoisonCountPercent(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_INCOMING_POISON_COUNT_PERCENTAGE)
end
function GetPoisonActiveTimePercent(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_POISON_ACTIVE_TIME_PERCENTAGE)
end
function GetPoisonActiveIncreasePercent(hUnit)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_POISON_ACTIVE_INCREASE_PERCENTAGE)
end
function GetPoisonImmune(hUnit, tParams)
	return GetModifierProperty(hUnit, EOM_MODIFIER_PROPERTY_POISON_IMMUNE, tParams)
end