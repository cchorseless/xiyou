//  额外基础攻击力
function GetBaseBonusDamage(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.BASEATTACK_BONUSDAMAGE, tParams)
}
//  物理防御
function GetBasePhysicalArmor(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.PHYSICAL_ARMOR_BASE)
}
function GetBonusPhysicalArmor(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.PHYSICAL_ARMOR_BONUS)
}
function GetBasePhysicalArmorPercentage(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.PHYSICAL_ARMOR_BASE_PERCENTAGE)
}
function GetPhysicalArmorPercentage(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.PHYSICAL_ARMOR_PERCENTAGE)
}
function GetPhysicalArmor(hUnit)
	let fTotalPercent = GetPhysicalArmorPercentage(hUnit) * 0.01 //  不要调用两遍
	return GetBasePhysicalArmor(hUnit) * (1 + GetBasePhysicalArmorPercentage(hUnit) * 0.01 + fTotalPercent) + GetBonusPhysicalArmor(hUnit) * (1 + fTotalPercent)
}
function GetIgnorePhysicalArmorPercentage(hUnit, tParams)
	return SubtractionMultiplicationPercentage(GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_PHYSICAL_ARMOR_PERCENTAGE, tParams), GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_PHYSICAL_ARMOR_PERCENTAGE_UNIQUE, tParams))
}
function GetIgnorePhysicalArmorPercentageTarget(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_PHYSICAL_ARMOR_PERCENTAGE_TARGET, tParams)
}
function GetPhysicalReduction(hUnit, tParams)
	let fValue = GetPhysicalArmor(hUnit)
	//  负甲的时候不计算无视护甲
	if ( fValue > 0 ) {
		let fIgnore = GetIgnorePhysicalArmorPercentageTarget(hUnit, tParams) //  自身被百分比无视护甲
		if ( tParams && GameFunc.IsValid(tParams.attacker) ) {
			fValue = math.max(0, fValue - GetProperty(tParams.attacker, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_PHYSICAL_ARMOR_CONSTANT, tParams))
			fIgnore = SubtractionMultiplicationPercentage(fIgnore, GetIgnorePhysicalArmorPercentage(tParams.attacker, tParams))
		}
		fValue = fValue - math.max(fValue * fIgnore * 0.01, 0)
	}
	return PHYSICAL_ARMOR_FACTOR * fValue / (1 + PHYSICAL_ARMOR_FACTOR * math.abs(fValue))
}
//  魔法防御
function GetBaseMagicalArmor(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MAGICAL_ARMOR_BASE)
}
function GetBonusMagicalArmor(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MAGICAL_ARMOR_BONUS)
}
function GetBaseMagicalArmorPercentage(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MAGICAL_ARMOR_BASE_PERCENTAGE)
}
function GetMagicalArmorPercentage(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MAGICAL_ARMOR_PERCENTAGE)
}
function GetMagicalArmor(hUnit)
	return GetBaseMagicalArmor(hUnit) * (1 + GetBaseMagicalArmorPercentage(hUnit) * 0.01 + GetMagicalArmorPercentage(hUnit) * 0.01) + GetBonusMagicalArmor(hUnit) * (1 + GetMagicalArmorPercentage(hUnit) * 0.01)
}
function GetIgnoreMagicalArmorPercentage(hUnit, tParams)
	return SubtractionMultiplicationPercentage(GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_MAGICAL_ARMOR_PERCENTAGE, tParams), GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_MAGICAL_ARMOR_PERCENTAGE_UNIQUE, tParams))
}
function GetIgnoreMagicalArmorConstant(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_MAGICAL_ARMOR_CONSTANT, tParams)
}
function GetIgnoreMagicalArmorPercentageTarget(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.IGNORE_MAGICAL_ARMOR_PERCENTAGE_TARGET, tParams)
}
function GetMagicalReduction(hUnit, tParams)
	let fValue = GetMagicalArmor(hUnit)
	//  负甲的时候不计算无视护甲
	if ( fValue > 0 ) {
		let fIgnore = GetIgnoreMagicalArmorPercentageTarget(hUnit, tParams) //  自身的被百分比无视护甲
		if ( tParams && GameFunc.IsValid(tParams.attacker) ) {
			fValue = fValue - math.min(GetIgnoreMagicalArmorConstant(tParams.attacker, tParams), fValue)
			fIgnore = SubtractionMultiplicationPercentage(fIgnore, GetIgnoreMagicalArmorPercentage(tParams.attacker, tParams))
		}
		fValue = fValue - math.max(fValue * fIgnore * 0.01, 0)
	}

	return MAGICAL_ARMOR_FACTOR * fValue / (1 + MAGICAL_ARMOR_FACTOR * math.abs(fValue))
}
//  技能增强
function GetBaseSpellAmplify(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_AMPLIFY_BASE, tParams)
}
function GetBonusSpellAmplify(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_AMPLIFY_BONUS, tParams)
}
function GetBonusSpellAmplifyUnique(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_AMPLIFY_BONUS_UNIQUE, tParams)
}
function GetSpellAmplify(hUnit, tParams)
	return GetBaseSpellAmplify(hUnit, tParams) + GetBonusSpellAmplify(hUnit, tParams) + GetBonusSpellAmplifyUnique(hUnit, tParams)
}
//  生命值
function GetHealthBonus(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.HEALTH_BONUS)
}
function GetHealthPercentage(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.HEALTH_PERCENTAGE)
}
function GetHealthPercentageEnemy(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.HEALTH_PERCENT_ENEMY)
}
//  生命恢复
function GetHealthRegen(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.HEALTH_REGEN_CONSTANT)
}
//  魔法值
function GetManaBonus(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MANA_BONUS)
}
function GetManaPercentage(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MANA_PERCENTAGE)
}
function GetBaseMana(hUnit)
	let fValue = 0
	if ( hUnit != null ) {
		if ( GameFunc.IsValid(hUnit) && hUnit._StatusMana == null ) {
			let sUnitName = hUnit.GetUnitName()
			let tData = hUnit.IsHero() && KeyValues.HeroesKv[sUnitName] || KeyValues.UnitsKv[sUnitName]
			if ( tData ) {
				hUnit._StatusMana = tonumber(tData.StatusMana) || 0
			}
		}
		if ( hUnit._StatusMana != null ) {
			fValue = hUnit._StatusMana
		}
	}
	return fValue
}
function GetTotalManaBonus(hUnit)
	let fPercent = GetManaPercentage(hUnit) * 0.01
	return GetManaBonus(hUnit) * (1 + fPercent) + GetBaseMana(hUnit) * fPercent
}
//  魔法恢复
function GetManaRegen(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MANA_REGEN_CONSTANT) + GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MANA_REGEN_CONSTANT_UNIQUE)
}

function GetManaRegenAmplify(hUnit, params)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MP_REGEN_AMPLIFY_PERCENTAGE, params)
}

function GetManaRegenTotal(hUnit)
	return (hUnit.GetStatusManaRegen() + GetManaRegen(hUnit)) * (1 + GetManaRegenAmplify(hUnit) / 100)
}
//  状态抗性
function GetStatusResistanceStack(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.STATUS_RESISTANCE_STACKING)
}
function GetStatusResistanceUnique(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.STATUS_RESISTANCE_UNIQUE)
}
function GetStatusResistance(hUnit)
	return (1 - (1 - GetStatusResistanceStack(hUnit) * 0.01) * (1 - GetStatusResistanceUnique(hUnit) * 0.01)) * 100
}
function GetStatusResistanceCaster(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.STATUS_RESISTANCE_CASTER)
}
//  闪避
function GetEvasion(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.EVASION_CONSTANT, tParams)
}
//  技能闪避
function GetSpellEvasion(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_EVASION, tParams)
}
//  冷却减少
function GetCooldownReduction(hUnit, tParams)
	let cd_reduction = GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.COOLDOWN_PERCENTAGE, tParams)
	let max_cd_reduction = GetMaxCooldownReduction(hUnit, tParams)
	if ( max_cd_reduction > 0 && max_cd_reduction < cd_reduction ) {
		return max_cd_reduction
	}
	return cd_reduction
}
function GetMaxCooldownReduction(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MAX_COOLDOWN_PERCENTAGE, tParams)
}
//  物理暴击
function GetCriticalStrikeChance(hUnit, tParams)
	if ( GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.NO_CRITICALSTRIKE, tParams) >= 1 ) {
		return 0
	}
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.CRITICALSTRIKE_CHANCE, tParams) + BASE_ATTACK_CRITICALSTRIKE_CHANCE
}
//  物理暴击伤害
function GetCriticalStrikeDamage(hUnit, tParams)
	let fDamage = BASE_ATTACK_CRITICALSTRIKE_DAMAGE + GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.CRITICALSTRIKE_DAMAGE, tParams)
	if ( tParams && GameFunc.IsValid(tParams.target) ) {
		fDamage = fDamage + GetProperty(tParams.target, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_CRITICALSTRIKE_DAMAGE_CONSTANT, tParams)
	}
	let fPercent = GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.CRITICALSTRIKE_DAMAGE_TOTAL, tParams)
	return fDamage * (1 + fPercent / 100)
}
// 物理暴击时技能暴击补偿
function GetCriticalStrikeDamage_Mix(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.CRITICALSTRIKE_MIX_PERCENT, tParams) * 0.01  * GetSpellCriticalStrikeDamage(hUnit, tParams)
}
//  技能暴击概率
function GetSpellCriticalStrikeChance(hUnit, tParams)
	if ( GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.NO_SPELL_CRITICALSTRIKE, tParams) >= 1 ) {
		return 0
	}
	let fChance = GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_CRITICALSTRIKE_CHANCE, tParams) + BASE_SPELL_CRITICALSTRIKE_CHANCE
	if ( tParams && GameFunc.IsValid(tParams.target) ) {
		fChance = fChance + GetProperty(tParams.target, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_CRITICALSTRIKE_CHANCE_TARGET, tParams)
	}
	return fChance
}
//  技能暴击伤害
function GetSpellCriticalStrikeDamage(hUnit, tParams)
	let fDamage = BASE_SPELL_CRITICALSTRIKE_DAMAGE + GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_CRITICALSTRIKE_DAMAGE)
	if ( tParams && GameFunc.IsValid(tParams.target) ) {
		fDamage = fDamage + GetProperty(tParams.target, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_SPELL_CRITICALSTRIKE_DAMAGE_CONSTANT, tParams)
	}
	let fPercent = GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_CRITICALSTRIKE_DAMAGE_TOTAL, tParams)
	return fDamage * (1 + fPercent / 100)
}
// 技能暴击时物理暴击补偿
function GetSpellCriticalStrikeDamage_Mix(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_CRITICALSTRIKE_MIX_PERCENT, tParams) * 0.01  * GetCriticalStrikeDamage(hUnit, tParams)
}
//  最大攻击速度
function GetBonusMaximumAttackSpeed(hUnit)
	if ( GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MAX_ATTACKSPEED_BONUS_UNABLE) >= 1 ) {
		return 0
	}
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.MAX_ATTACKSPEED_BONUS)
}
function GetMaximumAttackSpeed(hUnit)
	return GetBonusMaximumAttackSpeed(hUnit) + MAXIMUM_ATTACK_SPEED
}
function GetOutgoingDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.OUTGOING_DAMAGE_PERCENTAGE, tParams)
}
function GetOutgoingPhysicalDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.OUTGOING_PHYSICAL_DAMAGE_PERCENTAGE, tParams)
}
function GetOutgoingMagicalDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.OUTGOING_MAGICAL_DAMAGE_PERCENTAGE, tParams)
}
function GetOutgoingPureDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.OUTGOING_PURE_DAMAGE_PERCENTAGE, tParams)
}
//  受到的伤害
function GetIncomingDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_DAMAGE_PERCENTAGE, tParams)
}
function GetIncomingPhysicalDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_PHYSICAL_DAMAGE_PERCENTAGE, tParams)
}
function GetIncomingMagicalDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_MAGICAL_DAMAGE_PERCENTAGE, tParams)
}
function GetIncomingPureDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_PURE_DAMAGE_PERCENTAGE, tParams)
}
function GetIncomingDamagePercentEnemy(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_DAMAGE_PERCENTAGE_ENEMY, tParams)
}
// 毒伤害相关
function GetIncomingPoisonDamagePercent(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_POISON_DAMAGE_PERCENTAGE, tParams)
}
function GetOutgoingPoisonCountPercent(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.OUTGOING_POISON_COUNT_PERCENTAGE)
}
function GetIncomingPoisonCountPercent(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.INCOMING_POISON_COUNT_PERCENTAGE)
}
function GetPoisonActiveTimePercent(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.POISON_ACTIVE_TIME_PERCENTAGE)
}
function GetPoisonActiveIncreasePercent(hUnit)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.POISON_ACTIVE_INCREASE_PERCENTAGE)
}
function GetPoisonImmune(hUnit, tParams)
	return GetProperty(hUnit, @registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.POISON_IMMUNE, tParams)
}