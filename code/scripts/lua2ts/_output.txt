LinkLuaModifier("modifier_alchemist_4_buff_target", "abilities/tower/alchemist/alchemist_4.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_alchemist_4_buff_caster", "abilities/tower/alchemist/alchemist_4.lua", LUA_MODIFIER_MOTION_NONE)

// - @class alchemist_4.EOM_AbilityBaseClass
alchemist_4 = EOM_Ability({})
 GetAbilityTextureName() {
	return ResHelper.GetAbilityTextureReplacement(super.GetAbilityTextureName(this), this.GetCasterPlus())
}
 CastFilterResultTarget(hTarget) {
	let hCaster = this.GetCasterPlus()
	let iPlayerID = hCaster.GetPlayerOwnerID()
	let gold_cost = this.GetSpecialValueFor("gold_cost")
	let iPlayerGold = 0
	if ( IsServer() ) {
		if ( !hTarget.IsBuilding() ) {
			this.error = "dota_hud_error_only_can_cast_on_building"
			return UF_FAIL_CUSTOM
		}
		iPlayerGold = PlayerData.GetGold(iPlayerID)
	} else {
		iPlayerGold = PlayerDataClient.GetGold(iPlayerID)
	}
	if ( iPlayerGold < gold_cost ) {
		this.error = "DOTA_Hud_NeedMoreGold"
		return UF_FAIL_CUSTOM
	}
	return super.CastFilterResultTarget(this, hTarget)
}
 OnSpellStart() {
	let hCaster = this.GetCasterPlus()
	let hTarget = this.GetCursorTarget()
	let iPlayerID = hCaster.GetPlayerOwnerID()
	let gold_cost = this.GetSpecialValueFor("gold_cost")
	let cd = this.GetSpecialValueFor("cd")

	if ( PlayerData.GetGold(iPlayerID) >= gold_cost ) {
		hCaster.EmitSound(ResHelper.GetSoundReplacement("Hero_Alchemist.UnstableConcoction.Throw", hCaster))

		ProjectileManager.CreateTrackingProjectile({
			Ability : this,
			vSourceLoc : hCaster.GetAttachmentOrigin(hCaster.ScriptLookupAttachment("attach_attack3")),
			iMoveSpeed : 900,
			EffectName : "particles/units/heroes/hero_alchemist/alchemist_berserk_potion_projectile.vpcf",
			Target : hTarget,
		})
		PlayerData.ModifyGold(iPlayerID, -gold_cost)
		this.StartCooldown(cd)
	}
}
 OnProjectileHit(hTarget:BaseNpc_Plus, vLocation:Vector) {
	let hCaster = this.GetCasterPlus()

	EmitSoundOn(ResHelper.GetSoundReplacement("Hero_Alchemist.UnstableConcoction.Stun", hCaster), hTarget)
	hTarget.AddNewModifier(hCaster, this, "modifier_alchemist_4_buff_target", null)
	hCaster.AddNewModifier(hCaster, this, "modifier_alchemist_4_buff_caster", null)
}
// =======================================modifier_alchemist_4_buff_target=======================================
// - @class modifier_alchemist_4_buff_target.eom_modifier
modifier_alchemist_4_buff_target = eom_modifier({
	GetTexture : "modifier_bonus_health",
	IsHidden : false,
	IsPurgable : false,
	IsPurgeException : false,
})
 OnCreated(params: ModifierTable) {
	this.bonus_all = this.GetSpecialValueFor("bonus_all")
	if ( IsServer() ) {
		this.ModifyStackCount(this.bonus_all)
	}
}
 OnRefresh(params: ModifierTable) {
	this.bonus_all = this.GetSpecialValueFor("bonus_all")
	if ( IsServer() ) {
		this.ModifyStackCount(this.bonus_all)
	}
}
 EDeclareFunctions() {
	return {
		@registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.STATS_ALL_BONUS,
	}
}
 EOM_GetModifierBonusStats_All() {
	return this.GetStackCount()
}
 DeclareFunctions() {
	return {
		@registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.TOOLTIP,
	}
}
 OnTooltip() {
	return this.GetStackCount()
}
// =======================================modifier_alchemist_4_buff_caster=======================================
// - @class modifier_alchemist_4_buff_caster.eom_modifier
modifier_alchemist_4_buff_caster = eom_modifier({
	IsHidden : false,
	IsPurgable : false,
	IsPurgeException : false,
})
 OnCreated(params: ModifierTable) {
	this.spell_amp_stack = this.GetSpecialValueFor("spell_amp_stack")
	if ( IsServer() ) {
		this.ModifyStackCount(this.spell_amp_stack)
	}
}
 OnRefresh(params: ModifierTable) {
	this.spell_amp_stack = this.GetSpecialValueFor("spell_amp_stack")
	if ( IsServer() ) {
		this.ModifyStackCount(this.spell_amp_stack)
	}
}
 EDeclareFunctions() {
	return {
		@registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.SPELL_AMPLIFY_BONUS,
	}
}
 EOM_GetModifierSpellAmplifyBonus() {
	return this.GetStackCount()
}
 DeclareFunctions() {
	return {
		@registerProp(GameEnum.Property.Enum_MODIFIER_PROPERTY.TOOLTIP,
	}
}
 OnTooltip() {
	return this.GetStackCount()
}