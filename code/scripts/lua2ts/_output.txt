// [[
  Wearable Library by pilaoda
  
// ]]
if ( !Wearable ) {
    Wearable = {}
    Wearable.__index = Wearable
    _G.Wearable = Wearable
}

let attach_map = {
    customorigin : ParticleAttachment_t.PATTACH_CUSTOMORIGIN,
    ParticleAttachment_t.PATTACH_CUSTOMORIGIN : ParticleAttachment_t.PATTACH_CUSTOMORIGIN,
    point_follow : ParticleAttachment_t.PATTACH_POINT_FOLLOW,
    ParticleAttachment_t.PATTACH_POINT_FOLLOW : ParticleAttachment_t.PATTACH_POINT_FOLLOW,
    absorigin_follow : ParticleAttachment_t.PATTACH_ABSORIGIN_FOLLOW,
    ParticleAttachment_t.PATTACH_ABSORIGIN_FOLLOW : ParticleAttachment_t.PATTACH_ABSORIGIN_FOLLOW,
    rootbone_follow : ParticleAttachment_t.PATTACH_ROOTBONE_FOLLOW,
    ParticleAttachment_t.PATTACH_ROOTBONE_FOLLOW : ParticleAttachment_t.PATTACH_ROOTBONE_FOLLOW,
    renderorigin_follow : ParticleAttachment_t.PATTACH_RENDERORIGIN_FOLLOW,
    ParticleAttachment_t.PATTACH_RENDERORIGIN_FOLLOW : ParticleAttachment_t.PATTACH_RENDERORIGIN_FOLLOW,
    absorigin : ParticleAttachment_t.PATTACH_ABSORIGIN,
    ParticleAttachment_t.PATTACH_ABSORIGIN : ParticleAttachment_t.PATTACH_ABSORIGIN,
    customorigin_follow : ParticleAttachment_t.PATTACH_CUSTOMORIGIN_FOLLOW,
    ParticleAttachment_t.PATTACH_CUSTOMORIGIN_FOLLOW : ParticleAttachment_t.PATTACH_CUSTOMORIGIN_FOLLOW,
    worldorigin : ParticleAttachment_t.PATTACH_WORLDORIGIN,
    ParticleAttachment_t.PATTACH_WORLDORIGIN : ParticleAttachment_t.PATTACH_WORLDORIGIN
}

let PrismaticParticles = {}

let DefaultPrismatic = {}

let EtherealParticles = {}

let EtherealParticle2Names = {}

 Init() {
    let npc_heroes = LoadKeyValues("scripts/npc/npc_heroes.txt")
    let items_game = LoadKeyValues("scripts/items/items_game.txt")

    Wearable.asset_modifier = LoadKeyValues("scripts/items/asset_modifier.txt")
    Wearable.control_points = LoadKeyValues("scripts/items/control_points.txt")
    Wearable.respawn_items = LoadKeyValues("scripts/items/respawn_items.txt")

    Wearable.heroes = {} //  英雄槽位信息
    Wearable.Index2Name = {}
    for (let hero of ( npc_heroes)) {
	 

        if ( heroname != "Version" ) {
            Wearable.heroes[heroname] = {}
            Wearable.heroes[heroname]["bundles"] = {}
            Wearable.heroes[heroname]["ModelScale"] = hero["ModelScale"]

            Wearable.Index2Name[heroname] = {}

            let heroSlots = Wearable.heroes[heroname]
            if ( hero.ItemSlots ) {
                for (let Slot of ( hero.ItemSlots)) {
	 

                    heroSlots[Slot.SlotName] = {}
                    let heroSlot = heroSlots[Slot.SlotName]
                    heroSlot.SlotIndex = Slot.SlotIndex //  number

                    Wearable.Index2Name[heroname][Slot.SlotIndex] = Slot.SlotName

                    heroSlot.SlotText = Slot.SlotText
                    heroSlot.ItemDefs = {}
                    if ( Slot.DisplayInLoadout ) {
                        heroSlot.DisplayInLoadout = Slot.DisplayInLoadout
                    }
                }
            }
        }
    }

    let items = items_game.items
    let name2itemdef_Map = {}
    Wearable.items = items //  所有饰品信息
    Wearable.bundles = {} //  捆绑包
    Wearable.couriers = {} //  信使
    Wearable.wards = {} //  守卫

    for (let item of ( items)) {
	 

        let used_by_heroes = item.used_by_heroes
        let item_slot = item.item_slot
        if ( !item_slot ) {
            item_slot = "weapon"
        }

        if ( item.prefab == "wearable" && used_by_heroes ) {
            //  可佩戴饰品
            for (let activated of ( used_by_heroes)) {
	 

                if ( activated == 1 ) {
                    let heroSlot = Wearable.heroes[heroname][item_slot]
                    if ( heroSlot ) {
                        table.insert(heroSlot.ItemDefs, itemDef)
                        //  添加款式信息，将用于UI更新
                        if ( item.visuals && item.visuals.styles ) {
                            if ( !heroSlot.styles ) {
                                heroSlot.styles = {}
                            }
                            heroSlot.styles[itemDef] = {}
                            let style_table = item.visuals.styles
                            for (let style_table of ( item.visuals.styles)) {
	 

                                heroSlot.styles[itemDef][style] = {}
                                heroSlot.styles[itemDef][style].name = style_table.name
                                if (
                                    style_table.alternate_icon && item.visuals.alternate_icons && 
                                        item.visuals.alternate_icons[tostring(style_table.alternate_icon)]
                                 ) {
                                    heroSlot.styles[itemDef][style].icon_path =
                                        item.visuals.alternate_icons[tostring(style_table.alternate_icon)].icon_path
                                }
                            }
                        } else if ( item.visuals && item_slot == "shapeshift" ) {
                            //  龙骑变身款式
                            if ( !heroSlot.styles ) {
                                heroSlot.styles = {}
                            }
                            if ( !heroSlot.styles[itemDef] ) {
                                heroSlot.styles[itemDef] = {}
                                for (let style = 1; style <= 3 ; style++) {
                                    heroSlot.styles[itemDef][style - 1] = {}
                                    heroSlot.styles[itemDef][style - 1].name = tostring(style)
                                }
                            }
                        }
                    }
                }
            }

            name2itemdef_Map[item.name] = itemDef
        } else if ( item.prefab == "taunt" && used_by_heroes ) {
            //  嘲讽
            for (let activated of ( used_by_heroes)) {
	 

                if ( activated == 1 ) {
                    item_slot = "taunt"
                    let heroSlot = Wearable.heroes[heroname][item_slot]
                    if ( heroSlot ) {
                        table.insert(heroSlot.ItemDefs, itemDef)
                    }
                }
            }
        } else if ( item.prefab == "default_item" && used_by_heroes ) {
            //  默认饰品
            for (let activated of ( used_by_heroes)) {
	 

                if ( activated == 1 ) {
                    if ( Wearable.heroes[heroname] ) {
                        let heroSlot = Wearable.heroes[heroname][item_slot]
                        if ( heroSlot ) {
                            heroSlot.DefaultItem = itemDef
                            table.insert(heroSlot.ItemDefs, itemDef)
                        }
                        if ( item_slot == "shapeshift" ) {
                            //  龙骑变身款式
                            if ( !heroSlot.styles ) {
                                heroSlot.styles = {}
                            }
                            if ( !heroSlot.styles[itemDef] ) {
                                heroSlot.styles[itemDef] = {}
                                for (let style = 1; style <= 3 ; style++) {
                                    heroSlot.styles[itemDef][style - 1] = {}
                                    heroSlot.styles[itemDef][style - 1].name = tostring(style)
                                }
                            }
                        }
                    } else if ( heroname == "all" ) {
                        for (let hero of ( Wearable.heroes)) {
	 

                            let heroSlot = hero[item_slot]
                            if ( heroSlot ) {
                                heroSlot.DefaultItem = itemDef
                                table.insert(heroSlot.ItemDefs, itemDef)
                            }
                        }
                    }
                }
            }
        }
    }

    //  捆绑包
    for (let item of ( items)) {
	 

        let used_by_heroes = item.used_by_heroes
        if ( item.prefab == "bundle" && type(used_by_heroes) == "table" ) {
            for (let activated of ( used_by_heroes)) {
	 

                if ( activated == 1 ) {
                    table.insert(Wearable.heroes[heroname]["bundles"], itemDef)
                    Wearable.bundles[itemDef] = {}
                    for (let subItem_activated of ( item.bundle)) {
	 

                        if ( subItem_activated == 1 ) {
                            let subItemDef = name2itemdef_Map[subItemName]
                            table.insert(Wearable.bundles[itemDef], subItemDef)
                        }
                    }
                }
            }
        }
    }

    //  信使
    for (let item of ( items)) {
	 

        if ( item.prefab == "courier" ) {
            Wearable.couriers[itemDef] = {}
            let item_table = Wearable.couriers[itemDef]
            //  添加款式信息，将用于UI更新
            if ( item.visuals && item.visuals.styles ) {
                item_table.styles = item_table.styles || {}
                let style_table = item.visuals.styles
                for (let style_table of ( item.visuals.styles)) {
	 

                    item_table.styles[style] = {}
                    item_table.styles[style].name = style_table.name
                    if (
                        style_table.alternate_icon && item.visuals.alternate_icons && 
                            item.visuals.alternate_icons[tostring(style_table.alternate_icon)]
                     ) {
                        item_table.styles[style].icon_path =
                            item.visuals.alternate_icons[tostring(style_table.alternate_icon)].icon_path
                    }
                }
            }
        }
    }

    //  守卫
    for (let item of ( items)) {
	 

        if ( item.prefab == "ward" ) {
            Wearable.wards[itemDef] = {}
            let item_table = Wearable.wards[itemDef]
            //  添加款式信息，将用于UI更新
            if ( item.visuals && item.visuals.styles ) {
                item_table.styles = item_table.styles || {}
                let style_table = item.visuals.styles
                for (let style_table of ( item.visuals.styles)) {
	 

                    item_table.styles[style] = {}
                    item_table.styles[style].name = style_table.name
                    if (
                        style_table.alternate_icon && item.visuals.alternate_icons && 
                            item.visuals.alternate_icons[tostring(style_table.alternate_icon)]
                     ) {
                        item_table.styles[style].icon_path =
                            item.visuals.alternate_icons[tostring(style_table.alternate_icon)].icon_path
                    }
                }
            }
        }
    }

    Wearable.UICacheAvailableWards()

    //  棱彩宝石
    Wearable.prismatics = {}
    for (let color_table of ( items_game.colors)) {
	 

        if ( string.sub(color_key, 1, 8) == "unusual_" ) {
            Wearable.prismatics[color_key] = color_table
        }
    }

    Wearable.combination = {}

    Convars.RegisterCommand(
        "show_itemdefs",
        Dynamic_Wrap(Wearable, "ShowItemdefs"),
        "show current units' itemdefs",
        FCVAR_NOTIFY
    )
}

 PostInit() {
    print("PostInit")
    print(collectgarbage("count"))
    print(collectgarbage("collect"))
    print(collectgarbage("count"))
}

 RequestParticles(response) {
    Http.RequestParticles(
         (sBody) => {
            if ( !sBody ) {
                response(false)
                return
            }
            let hBody = JSON.decode(sBody)
            //  PrintTable(hBody)
            PrismaticParticles = hBody.PrismaticParticles || PrismaticParticles
            DefaultPrismatic = hBody.DefaultPrismatic || DefaultPrismatic
            EtherealParticles = hBody.EtherealParticles || EtherealParticles
            //  虚灵宝石
            let EtherealParticleKeys = {}
            for (let sEtherealParticle of ( EtherealParticles)) {
	 

                EtherealParticleKeys[sEtherealName] = 1
                EtherealParticle2Names[sEtherealParticle] = sEtherealName
                PrismaticParticles[sEtherealParticle] = 1
            }

            CustomNetTables.SetTableValue("gems", "prismatics", Wearable.prismatics)
            CustomNetTables.SetTableValue("gems", "ethereals", EtherealParticleKeys)
            Wearable.PrismaticParticles = PrismaticParticles
            response(true)
        }
    )
}

 ShowItemdefs() {
    let hPlayer = Convars.GetCommandClient()
    CustomGameEventManager.Send_ServerToPlayer(hPlayer, "ShowItemdefs", {})
}

//  是否为身心子槽位
 IsPersona(sSlotName) {
    return string.sub(sSlotName, -10) == "_persona_1"
}

//  脱下饰品
 TakeOffSlot(hUnit, sSlotName) {
    if ( hUnit.Slots[sSlotName] ) {
        for p_name, p in pairs(hUnit.Slots[sSlotName]["particles"]) do
            if ( p != false ) {
                ParticleManager.DestroyParticle(p, true)
                ParticleManager.ReleaseParticleIndex(p)
                hUnit.Slots[sSlotName]["particles"][p_name] = null
            }
            if ( hUnit["prismatic_particles"] && hUnit["prismatic_particles"][p_name] ) {
                hUnit["prismatic_particles"][p_name] = null
            }
        }

        if ( hUnit.Slots[sSlotName]["replace_particle_names"] ) {
            //  恢复被替换的特效
            for replace_p_name, _ in pairs(hUnit.Slots[sSlotName]["replace_particle_names"]) do
                for (let hSubWear of ( hUnit.Slots)) {
	 

                    for p_name, sub_p in pairs(hSubWear["particles"]) do
                        if ( replace_p_name == p_name ) {
                            Wearable.AddParticle(hUnit, hSubWear, replace_p_name, sSubSlotName)
                            break
                        }
                    }
                }
            }
        }

        if ( hUnit.Slots[sSlotName]["default_projectile"] ) {
            hUnit.new_projectile = null
            hUnit.SetRangedProjectileName(hUnit.Slots[sSlotName]["default_projectile"])
        }

        if ( hUnit.Slots[sSlotName]["additional_wearable"] ) {
            for _, prop in pairs(hUnit.Slots[sSlotName]["additional_wearable"]) do
                if ( prop && IsValidEntity(prop) ) {
                    prop.RemoveSelf()
                }
            }
        }
        if ( hUnit.Slots[sSlotName]["model"] ) {
            let prop = hUnit.Slots[sSlotName]["model"]
            if ( prop && IsValidEntity(prop) ) {
                prop.RemoveSelf()
            }
        }
        if ( hUnit.Slots[sSlotName]["bChangeSkin"] ) {
            hUnit.SetSkin(0)
        }
        if ( hUnit.Slots[sSlotName]["bChangeModel"] ) {
            hUnit.SetOriginalModel(hUnit.old_model)
            hUnit.SetModel(hUnit.old_model)
        }
        if ( hUnit.Slots[sSlotName]["bChangeSummon"] ) {
            for sSummonName, b in pairs(hUnit.Slots[sSlotName]["bChangeSummon"]) do
                hUnit.Slots[sSlotName]["bChangeSummon"][sSummonName] : false
                hUnit.summon_model[sSummonName] = null
            }
        }
        if ( hUnit.Slots[sSlotName]["activity"] ) {
            ActivityModifier.RemoveWearableActivity(hUnit, hUnit.Slots[sSlotName].itemDef)
        }

        hUnit.summon_skin = null

        if ( hUnit.Slots[sSlotName]["bPersona"] ) {
            hUnit.bPersona = null
            hUnit.Slots[sSlotName]["bPersona"] = null //  防止stack overflow
            Wearable.SwitchPersona(hUnit, false)
        }

        if ( hUnit.Slots[sSlotName]["bChangeScale"] ) {
            let nDefaultScale = Wearable.heroes[hUnit.sHeroName]["ModelScale"]
            hUnit.SetModelScale(nDefaultScale)
        }

        let hWear = hUnit.Slots[sSlotName]
        if ( hWear.model_modifiers ) {
            for (let tModifier of ( hWear.model_modifiers )) {

                for (let hSubWear of ( hUnit.Slots)) {
	 

                    if ( hSubWear != hWear && hSubWear.model && hSubWear.model.GetModelName() == tModifier.modifier ) {
                        hSubWear.model.SetModel(tModifier.asset)
                    }
                }
            }
        }

        hUnit.Slots[sSlotName] = null
    }
}

 SwitchPersona(hUnit, bPersona) {
    print("SwitchPersona", bPersona)
    for (let hSlot of ( hUnit.Slots)) {
	 

        Wearable.TakeOffSlot(hUnit, sSlotName)
    }
    if ( bPersona ) {
        Wearable.WearDefaultsPersona(hUnit)
    } else {
        Wearable.WearDefaults(hUnit)
    }
}

 WearDefaults(hUnit) {
    let hHeroSlots = Wearable.heroes[hUnit.sHeroName]
    hUnit.Slots = {}

    //  for (let child of ( hUnit.GetChildren())) {
	 

    //      if ( child.GetClassname() == "dota_item_wearable" ) {
    //          child.AddEffects(EntityEffects.EF_NODRAW)
    //      }
    //  }

    for (let hSlot of ( hHeroSlots)) {
	 

        if ( type(hSlot) == "table" && hSlot.DefaultItem && (!Wearable.IsPersona(sSlotName)) ) {
            Wearable.Wear(hUnit, hSlot.DefaultItem)
        }
    }
    let unit_index = hUnit.GetEntityIndex()
    CustomNetTables.SetTableValue("hero_wearables", tostring(unit_index), hUnit.Slots)
}

 WearDefaultsPersona(hUnit) {
    print("WearDefaultsPersona")
    let hHeroSlots = Wearable.heroes[hUnit.sHeroName]
    hUnit.Slots = {}

    //  for (let child of ( hUnit.GetChildren())) {
	 

    //      if ( child.GetClassname() == "dota_item_wearable" ) {
    //          child.AddEffects(EntityEffects.EF_NODRAW)
    //      }
    //  }

    for (let hSlot of ( hHeroSlots)) {
	 

        if ( type(hSlot) == "table" && hSlot.DefaultItem && Wearable.IsPersona(sSlotName) ) {
            Wearable.Wear(hUnit, hSlot.DefaultItem)
        }
    }
    let unit_index = hUnit.GetEntityIndex()
    CustomNetTables.SetTableValue("hero_wearables", tostring(unit_index), hUnit.Slots)
}

 GetSlotName(sItemDef) {
    if ( type(sItemDef) != "string" ) {
        sItemDef = tostring(sItemDef)
    }

    let hItem = Wearable.items[sItemDef]
    let sSlotName = hItem.item_slot
    if ( hItem.prefab == "taunt" ) {
        sSlotName = "taunt"
    } else if ( !sSlotName ) {
        sSlotName = "weapon"
    }
    return sSlotName
}

 GetSlotNameBySlotIndex(hUnit, nSlotIndex) {
    let sHeroName = ""
    if ( type(hUnit) == "string" ) {
        sHeroName = hUnit
    } else {
        sHeroName = hUnit.sHeroName
    }
    let sSlotName = Wearable.Index2Name[sHeroName][nSlotIndex]
    return sSlotName
}

 GetSlotIndex(hUnit, sItemDef) {
    if ( type(sItemDef) != "string" ) {
        sItemDef = tostring(sItemDef)
    }

    let sHeroName = hUnit.sHeroName
    let hItem = Wearable.items[sItemDef]
    let sSlotName = hItem.item_slot

    if ( hItem.prefab == "taunt" ) {
        sSlotName = "taunt"
    } else if ( !sSlotName ) {
        sSlotName = "weapon"
    }
    return Wearable.heroes[sHeroName][sSlotName].SlotIndex
}

 IsDisplayInLoadout(sHeroName, sSlotName) {
    let heroSlots = Wearable.heroes[sHeroName]
    let Slot = heroSlots[sSlotName]
    if ( (!Slot) || Slot.DisplayInLoadout == 0 ) {
        return false
    }
    return true
}

 GetRepawnUnitName(sHeroName, hNewWears) {
    let sUnitName = string.gsub(sHeroName, "npc_dota_hero", "npc_dota_unit")
    let sUnitNameWithWear = sUnitName
    for (let nSlotIndexNew = 0; nSlotIndexNew <= 10 ; nSlotIndexNew++) {
        let sSlotNameNew = Wearable.GetSlotNameBySlotIndex(sHeroName, nSlotIndexNew)
        if ( sSlotNameNew && hNewWears[sSlotNameNew] && Wearable.IsDisplayInLoadout(sHeroName, sSlotNameNew) ) {
            let sItemDefNew = hNewWears[sSlotNameNew].sItemDef
            let sStyleNew = hNewWears[sSlotNameNew].sStyle
            if ( Wearable.respawn_items[sItemDefNew] == 1 ) {
                sUnitNameWithWear = sUnitNameWithWear + "__" + nSlotIndexNew + "_" + sItemDefNew
            }
        }
    }
    return sUnitNameWithWear
}

//  重生单位，或者重生模式复制单位时，添加非重生饰品时使用
 WearAfterRespawn(hUnit, hNewWears) {
    hUnit.Slots = {}
    for (let hNewWear of ( hNewWears)) {
	 

        let sItemDef = hNewWear.sItemDef
        if ( Wearable.respawn_items[sItemDef] == 1 && GameRules.herodemo.m_bRespawnWear ) {
            //  重生模型设置重生饰品table
            let hWear = {}
            hWear["itemDef"] = sItemDef
            hWear["bRespawnItem"] : true
            hWear["particles"] = {}
            hUnit.Slots[sSlotName] = hWear

            let asset_modifiers = Wearable.asset_modifier[sItemDef]
            if ( asset_modifiers ) {
                for (let am_table of ( asset_modifiers )) {

                    if ( type(am_table) == "table" && am_table.type == "activity" ) {
                        //  修改动作
                        //  print("activity", am_table.modifier)
                        if ( !am_table.style || tostring(am_table.style) == sStyle ) {
                            ActivityModifier.AddWearableActivity(hUnit, am_table.modifier, sItemDef)
                            hWear["activity"] : true
                        }
                    } else if ( type(am_table) == "table" && am_table.type == "particle_projectile" ) {
                        //  更换攻击弹道特效
                        //  print("particle_projectile", am_table.modifier)
                        if (
                            ((!am_table.style) || tostring(am_table.style) == sStyle) && 
                                (!am_table.spawn_in_loadout_only)
                         ) {
                            let default_projectile = am_table.asset
                            let new_projectile = am_table.modifier
                            if ( hUnit.GetRangedProjectileName() == default_projectile ) {
                                //  print("new_projectile", new_projectile)
                                hWear["default_projectile"] = default_projectile
                            } else {
                                hWear["default_projectile"] = am_table.asset
                            }
                            hUnit.SetRangedProjectileName(new_projectile)
                            hUnit.new_projectile = new_projectile
                            print(hUnit, "new_projectile", hUnit.new_projectile)
                        }
                    } else if ( type(am_table) == "table" && am_table.type == "entity_model" ) {
                        //  print("entity_model", am_table.asset)
                        //  更换召唤物模型
                        hUnit.summon_model = hUnit.summon_model || {}
                        hUnit.summon_model[am_table.asset] = am_table.modifier
                        hWear["bChangeSummon"] = hWear["bChangeSummon"] || {}
                        hWear["bChangeSummon"][am_table.asset] : true

                        //  召唤物skin写在外面，目前发现骨法金棒子 剑圣金猫
                        let nSkin = asset_modifiers["skin"]
                        if ( nSkin != null ) {
                            hUnit.summon_skin = nSkin
                        }
                    }
                }
            }

            if ( DefaultPrismatic && DefaultPrismatic[sItemDef] && !hUnit.prismatic ) {
                let sPrismaticName = DefaultPrismatic[sItemDef]
                Wearable.SwitchPrismatic(hUnit, sPrismaticName)
            }
        } else {
            //  重生模式穿非重生饰品，或者非重生模式穿任意饰品
            Wearable._WearProp(hUnit, sItemDef, sSlotName, "0")
        }
    }

    if ( hUnit.prismatic ) {
        Wearable.SwitchPrismatic(hUnit, hUnit.prismatic)
    }

    if ( hUnit.ethereals ) {
        for (let old_p_index of ( hUnit.ethereals)) {
	 

            if ( old_p_index != false ) {
                ParticleManager.DestroyParticle(old_p_index, true)
                ParticleManager.ReleaseParticleIndex(old_p_index)
                let particle_name = EtherealParticles[sEtherealName]
                let p_index = Wearable.AddParticle(hUnit, null, particle_name, null, "0")
                if ( hUnit.prismatic && Wearable.CanPrismatic(particle_name, hUnit.prismatic) ) {
                    let sHexColor = Wearable.prismatics[hUnit.prismatic].hex_color
                    let vColor = HexColor2RGBVector(sHexColor)
                    ParticleManager.SetParticleControl(p_index, 16, Vector(1, 0, 0))
                    ParticleManager.SetParticleControl(p_index, 15, vColor)
                }
                hUnit.ethereals[sEtherealName] = p_index
            }
        }
    }

    let unit_index = hUnit.GetEntityIndex()
    CustomNetTables.SetTableValue("hero_wearables", tostring(unit_index), hUnit.Slots)
}

//  通过重生带饰品的新单位来换多件饰品
 _WearItemsRespawn(hUnitOrigin, hNewWears) {
    let nUnitIndexOld = hUnitOrigin.nOriginID || hUnitOrigin.GetEntityIndex()

    let sUnitName = hUnitOrigin.sUnitName
    let sUnitNameWithWear = sUnitName

    let hBundle = {}
    for (let hNewWear of ( hNewWears)) {
	 

        let sSubItemDef = hNewWear.sItemDef
        let sSubItemStyle = hNewWear.sStyle
        let hSubItem = {
            unit : nUnitIndexOld,
            itemDef : sSubItemDef,
            itemStyle : sSubItemStyle,
            slotName : sSubSlotName
        }
        table.insert(hBundle, hSubItem)
    }

    if ( GameRules.herodemo.m_bRespawnWear ) {
        sUnitNameWithWear = Wearable.GetRepawnUnitName(hUnitOrigin.sHeroName, hNewWears)
    }
    //  非重生模式时，需要重生一个默认单位，单位名不变

    let hPlayer = hUnitOrigin.GetPlayerOwner()
    let nPlayerID = hPlayer.GetPlayerID()
    let hPlayerHero = PlayerResource.GetSelectedHeroEntity(nPlayerID)

    let position = hUnitOrigin.GetAbsOrigin()
    let forward = hUnitOrigin.GetForwardVector()
    print("_WearItemsRespawn", sUnitNameWithWear)

    CreateUnitByNameAsync(
        sUnitNameWithWear,
        position,
        true,
        null,
        null,
        hUnitOrigin.GetTeam(),
         (hUnitNew) => {
            table.insert(GameRules.herodemo.m_tAlliesList, hUnitNew)
            CustomNetTables.SetTableValue(
                "hero_prismatic",
                tostring(hUnitNew.GetEntityIndex()),
                CustomNetTables.GetTableValue("hero_prismatic", tostring(hUnitOrigin.GetEntityIndex()))
            )
            CustomNetTables.SetTableValue(
                "hero_ethereals",
                tostring(hUnitNew.GetEntityIndex()),
                CustomNetTables.GetTableValue("hero_ethereals", tostring(hUnitOrigin.GetEntityIndex()))
            )

            CustomNetTables.SetTableValue("hero_wearables", tostring(hUnitOrigin.GetEntityIndex()), null)
            CustomNetTables.SetTableValue("hero_prismatic", tostring(hUnitOrigin.GetEntityIndex()), null)
            CustomNetTables.SetTableValue("hero_ethereals", tostring(hUnitOrigin.GetEntityIndex()), null)

            hUnitNew.nOriginID = nUnitIndexOld
            hUnitNew.prismatic = hUnitOrigin.prismatic
            hUnitNew.ethereals = hUnitOrigin.ethereals
            hUnitOrigin.RemoveSelf()
            hUnitNew.SetOwner(hPlayerHero)
            hUnitNew.SetControllableByPlayer(nPlayerID, false)
            //  hUnitNew.SetRespawnPosition(hPlayerHero.GetAbsOrigin())
            FindClearSpaceForUnit(hUnitNew, position, false)
            hUnitNew.SetForwardVector(forward)
            hUnitNew.Hold()
            hUnitNew.SetIdleAcquire(false)
            hUnitNew.SetAcquisitionRange(0)
            hUnitNew.AddNewModifier(hUnit, null, "no_health_bar", null)
            hUnitNew.sUnitName = sUnitName
            hUnitNew.sHeroName = string.gsub(sUnitName, "npc_dota_unit", "npc_dota_hero")
            Wearable.WearAfterRespawn(hUnitNew, hNewWears)
            CustomGameEventManager.Send_ServerToPlayer(
                hPlayer,
                "RespawnWear",
                {
                    old_unit = nUnitIndexOld,
                    new_unit = hUnitNew.GetEntityIndex(),
                    bundle = hBundle
                }
            )
        }
    )
}

//  通过重生带饰品的新单位来换装单件itemDef
 _WearRespawn(hUnitOrigin, sItemDef, sSlotName, sStyle) {
    let hNewWears = {}

    let hItem = Wearable.items[sItemDef]
    for (let hWearOrigin of ( hUnitOrigin.Slots)) {
	 

        hNewWears[sSlotNameOrigin] = {
            sItemDef = hWearOrigin["itemDef"],
            sStyle = "0"
        }
    }

    if ( hItem.prefab == "bundle" ) {
        for _, sSubItemDef in pairs(Wearable.bundles[sItemDef]) do
            let sSubSlotName = Wearable.GetSlotName(sSubItemDef)
            hNewWears[sSubSlotName] = {
                sItemDef = sSubItemDef,
                sStyle = "0"
            }
        }
    } else {
        hNewWears[sSlotName] = {
            sItemDef = sItemDef,
            sStyle = "0"
        }
    }

    Wearable._WearItemsRespawn(hUnitOrigin, hNewWears)
}

//  判断换某套搭配时是否需要重生
 ShouldRespawnForCombination(hUnit, hCombination) {
    for (let _hWear of ( hUnit.Slots )) {

        if ( _hWear["bRespawnItem"] ) {
            //  被替换的饰品中有重生饰品
            return true
        }
    }

    if ( GameRules.herodemo.m_bRespawnWear ) {
        for (let nSlotIndex = 0; nSlotIndex <= 10 ; nSlotIndex++) {
            let nItemDef = hCombination["itemDef" + nSlotIndex]
            if ( Wearable.respawn_items[tostring(nItemDef)] == 1 ) {
                //  搭配中有重生饰品
                return true
            }
        }
    }

    return false
}

//  判断换某个itemDef时是否需要重生，包括捆绑包
 ShouldRespawnForItem(hUnit, sItemDef) {
    if ( type(sItemDef) != "string" ) {
        sItemDef = tostring(sItemDef)
    }

    if ( !hUnit.Slots ) {
        return false
    }

    let bHasRespawnItem = false
    for (let _hWear of ( hUnit.Slots )) {

        if ( _hWear["bRespawnItem"] ) {
            bHasRespawnItem = true
            break
        }
    }

    let hItem = Wearable.items[sItemDef]
    if ( hItem.prefab == "bundle" ) {
        if ( GameRules.herodemo.m_bRespawnWear ) {
            for _, sSubItemDef in pairs(Wearable.bundles[sItemDef]) do
                let sSubSlotName = Wearable.GetSlotName(sSubItemDef)
                let hSubWearOld = hUnit.Slots[sSubSlotName]
                if ( hSubWearOld && hSubWearOld["bRespawnItem"] ) {
                    //  被替换的槽位中有重生饰品
                    return true
                } else if ( Wearable.respawn_items[sSubItemDef] == 1 ) {
                    //  捆绑包中有重生饰品
                    return true
                }
            }
        } else {
            if ( bHasRespawnItem ) {
                //  已关闭重生饰品模式，但原单位仍有重生饰品，需要重生一个默认单位
                return true
            }
        }

        return false
    }

    let sSlotName = Wearable.GetSlotName(sItemDef)
    let hWearOld = hUnit.Slots[sSlotName]

    if ( !GameRules.herodemo.m_bRespawnWear && bHasRespawnItem ) {
        //  已关闭重生饰品模式，但原单位仍有重生饰品，需要重生一个默认单位
        return true
    } else if ( hWearOld && GameRules.herodemo.m_bRespawnWear && hWearOld["bRespawnItem"] ) {
        //  被替换的槽位中有重生饰品，需要重生一个不包含该重生饰品的单位
        return true
    } else if ( GameRules.herodemo.m_bRespawnWear && Wearable.respawn_items[sItemDef] == 1 ) {
        //  新饰品为重生饰品
        return true
    } else {
        return false
    }
}


 RefreshSpectreArcana(hUnit, sStyle) {
    if ( hUnit.GetModelName() == "models/items/spectre/spectre_arcana/spectre_arcana_base.vmdl" ) {
        //  幽鬼至宝，把五把刀设置出来
        hUnit.SetBodygroupByName("blade_01", 1)
        hUnit.SetBodygroupByName("blade_02", 1)
        hUnit.SetBodygroupByName("blade_03", 1)
        hUnit.SetBodygroupByName("blade_04", 1)
        hUnit.SetBodygroupByName("blade_05", 1)
    }

    for (let hWear of ( hUnit.Slots)) {
	 

        if ( hWear["model"] ) {
            if ( sStyle == "1" ) {
                hWear["model"]:SetBodygroupByName("arcana", 2)
            } else {
                hWear["model"]:SetBodygroupByName("arcana", 0)
            }
        }
    }
}

 RefreshSpecial(hUnit) {
    for (let hWear of ( hUnit.Slots)) {
	 

        if ( hWear.itemDef == "9662" ) {
            Wearable.RefreshSpectreArcana(hUnit, hWear.style)
            return
        }
    }
}

//  通过生成prop_dynamic来换装
 _WearProp(hUnit, sItemDef, sSlotName, sStyle) {
    if ( (!sItemDef) || sItemDef == "null" ) {
        print("sItemDef null")
        return
    }

    if ( type(sItemDef) != "string" ) {
        sItemDef = tostring(sItemDef)
    }

    if ( !sStyle ) {
        sStyle = "0"
    } else if ( type(sStyle) != "string" ) {
        sStyle = tostring(sStyle)
    }

    let hItem = Wearable.items[sItemDef]
    let sUnitName = hUnit.GetUnitName()
    let sHeroName = hUnit.sHeroName

    if ( sHeroName == "npc_dota_hero_tiny" ) {
        Wearable.SetTinyDefaultModel(hUnit, sItemDef)
    }
    let nModelIndex = -1

    print("_WearProp", sItemDef, sStyle)
    let sModel_player = hItem.model_player
    let hWear = {}
    hWear["itemDef"] = sItemDef
    hWear["particles"] = {}

    //  删除原饰品
    Wearable.TakeOffSlot(hUnit, sSlotName)

    hWear["style"] = sStyle


    for (let hOtherWear of ( hUnit.Slots)) {
	 

        if ( hOtherWear.model_modifiers ) {
            for (let tModelModifier of ( hOtherWear.model_modifiers )) {

                if ( sModel_player == tModelModifier.asset ) {
                    sModel_player = tModelModifier.modifier
                }
            }
        }
    }

    //  生成饰品模型
    if ( sModel_player ) {
        let sPropClass = Wearable.GetPropClass(hUnit, sItemDef)
        let sDefaultAnim = Wearable.SpecialFixAnim(hUnit, sItemDef)
        let hModel = null
        if ( sDefaultAnim ) {
            hModel =
                SpawnEntityFromTableSynchronous(
                sPropClass,
                {
                    model : sModel_player,
                    DefaultAnim : sDefaultAnim
                }
            )
        } else {
            hModel = SpawnEntityFromTableSynchronous(sPropClass, {model : sModel_player})
        }
        hModel.SetOwner(hUnit)
        hModel.SetParent(hUnit, "")
        hModel.FollowEntity(hUnit, true)
        hWear["model"] = hModel
        if ( hItem.visuals && hItem.visuals.skin ) {
            hModel.SetSkin(hItem.visuals.skin)
        }
    }

    let asset_modifiers = Wearable.asset_modifier[sItemDef]
    if ( asset_modifiers ) {
        for (let am_table of ( asset_modifiers)) {
	 

            if ( type(am_table) == "table" && am_table.type == "persona" && am_table.persona == 1 ) {
                Wearable.SwitchPersona(hUnit, true)
                hWear["bPersona"] : true
                hUnit.bPersona = true
            }
        }
        for (let am_table of ( asset_modifiers)) {
	 

            if ( am_name == "styles" ) {
                //  不同款式设置模型皮肤
                let style_table = am_table[sStyle]
                if ( style_table && style_table.model_player && style_table.model_player != sModel_player ) {
                    hWear["model"]:SetModel(style_table.model_player)
                }
                if ( style_table && style_table.skin && hWear["model"] ) {
                    hWear["model"]:SetSkin(style_table.skin)
                }
                if ( style_table && style_table.skin && !hWear["model"] ) {
                    //  召唤物款式， 目前仅发现德鲁伊熊灵
                    hUnit.summon_skin = style_table.skin
                }
            } else if ( type(am_table) == "table" && am_table.type == "additional_wearable" ) {
                //  print("additional_wearable", am_table.asset)
                //  额外模型
                if ( !hWear["additional_wearable"] ) {
                    hWear["additional_wearable"] = {}
                }
                let sModel = am_table.asset
                let hModel = SpawnEntityFromTableSynchronous("prop_dynamic", {model = sModel})
                hModel.SetOwner(hUnit)
                hModel.SetParent(hUnit, "")
                hModel.FollowEntity(hUnit, true)
                table.insert(hWear["additional_wearable"], hModel)
            } else if ( type(am_table) == "table" && am_table.type == "entity_model" ) {
                //  更换英雄模型
                print("entity_model", am_table.asset)

                if ( sHeroName == am_table.asset ) {
                    let sNewModel = am_table.modifier
                    if ( !hUnit.old_model ) {
                        hUnit.old_model = hUnit.GetModelName()
                    }
                    hUnit.SetOriginalModel(sNewModel)
                    hUnit.SetModel(sNewModel)
                    hWear["bChangeModel"] : true
                } else if ( sHeroName == "npc_dota_hero_tiny" ) {
                    let sModelIndex = string.sub(am_table.asset, -1, -1)
                    nModelIndex = tonumber(sModelIndex) + 1
                    hUnit["Model" + nModelIndex] = am_table.modifier
                    if ( nModelIndex == hUnit.nModelIndex ) {
                        hUnit.SetOriginalModel(am_table.modifier)
                        hUnit.SetModel(am_table.modifier)
                    }
                } else {
                    //  更换召唤物模型
                    hUnit.summon_model = hUnit.summon_model || {}
                    hUnit.summon_model[am_table.asset] = am_table.modifier
                    hWear["bChangeSummon"] = hWear["bChangeSummon"] || {}
                    hWear["bChangeSummon"][am_table.asset] : true

                    //  召唤物skin写在外面，目前发现骨法金棒子 剑圣金猫
                    let nSkin = asset_modifiers["skin"]
                    if ( nSkin != null ) {
                        hUnit.summon_skin = nSkin
                    }
                }
            } else if ( type(am_table) == "table" && am_table.type == "hero_model_change" ) {
                //  更换英雄变身模型
                //  print("hero_model_change", am_table.asset)
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) ) {
                    hUnit.hero_model_change = am_table
                }
            } else if ( type(am_table) == "table" && am_table.type == "model" ) {
                //  更换其他饰品模型
                //  print("hero_model_change", am_table.asset)
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) ) {
                    hWear.model_modifiers = hWear.model_modifiers || {}
                    table.insert(hWear.model_modifiers, am_table)

                    for (let hSubWear of ( hUnit.Slots)) {
	 

                        if ( hSubWear != hWear && hSubWear.model && hSubWear.model.GetModelName() == am_table.asset ) {
                            hSubWear.model.SetModel(am_table.modifier)
                        }
                    }
                }
            }
        }

        //  一定要在更换模型后面，否则可能找不到attachment
        for (let am_table of ( asset_modifiers )) {

            if ( type(am_table) == "table" && am_table.type == "particle_create" ) {
                //  周身特效
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) && (!am_table.spawn_in_loadout_only) ) {
                    let particle_name = am_table.modifier
                    let bReplaced = false
                    if ( !Wearable.IsDisplayInLoadout(sHeroName, sSlotName) ) {
                        //  隐藏槽位查看特效是否已被替换
                        for (let hSubWear of ( hUnit.Slots)) {
	 

                            if ( hSubWear["replace_particle_names"] && hSubWear["replace_particle_names"][particle_name] ) {
                                bReplaced = true
                                hWear["particles"][particle_name] : false
                                break
                            }
                        }
                    }
                    if ( !bReplaced ) {
                        Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)
                    }
                }
            } else if ( type(am_table) == "table" && am_table.type == "particle_replace" ) {
                //  替换其他饰品的周身特效
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) && (!am_table.spawn_in_loadout_only) ) {
                    let default_particle_name = am_table.asset
                    let particle_name = am_table.modifier
                    for (let hSubWear of ( hUnit.Slots)) {
	 

                        for p_name, sub_p in pairs(hSubWear["particles"]) do
                            if ( default_particle_name == p_name ) {
                                if ( sub_p != false ) {
                                    ParticleManager.DestroyParticle(sub_p, true)
                                    ParticleManager.ReleaseParticleIndex(sub_p)
                                    hSubWear["particles"][p_name] : false
                                }
                                break
                            }
                        }
                    }
                    let p = Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)
                    hWear["replace_particle_names"] = hWear["replace_particle_names"] || {}
                    hWear["replace_particle_names"][default_particle_name] : true
                    if ( sHeroName == "npc_dota_hero_tiny" && nModelIndex > 0 ) {
                        hUnit["Particles" + nModelIndex][particle_name] = {
                            pid = p,
                            hWearParticles = hWear["particles"],
                            recreate =  () => {
                                return Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)
                            }
                        }
                    }
                }
            } else if ( type(am_table) == "table" && am_table.type == "particle_projectile" ) {
                //  更换攻击弹道特效
                print("particle_projectile", am_table.modifier)
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) && (!am_table.spawn_in_loadout_only) ) {
                    let default_projectile = am_table.asset
                    let new_projectile = am_table.modifier
                    if ( hUnit.GetRangedProjectileName() == default_projectile ) {
                        //  print("new_projectile", new_projectile)
                        hWear["default_projectile"] = default_projectile
                    } else {
                        hWear["default_projectile"] = am_table.asset
                    }
                    hUnit.SetRangedProjectileName(new_projectile)
                    hUnit.new_projectile = new_projectile
                    print(hUnit, "new_projectile", hUnit.new_projectile)
                }
            } else if ( type(am_table) == "table" && am_table.type == "model_skin" ) {
                //  模型皮肤
                //  print("model_skin", am_table.skin)
                if ( !am_table.style || tostring(am_table.style) == sStyle ) {
                    hUnit.SetSkin(am_table.skin)
                    hWear["bChangeSkin"] : true
                }
            } else if ( type(am_table) == "table" && am_table.type == "activity" ) {
                //  修改动作
                //  print("activity", am_table.modifier)
                if ( !am_table.style || tostring(am_table.style) == sStyle ) {
                    ActivityModifier.AddWearableActivity(hUnit, am_table.modifier, sItemDef)
                    hWear["activity"] : true
                }
            } else if ( type(am_table) == "table" && am_table.type == "entity_scale" ) {
                //  修改模型大小
                //  print("activity", am_table.modifier)
                if ( (!am_table.style || tostring(am_table.style) == sStyle) && (!am_table.asset) ) {
                    hUnit.SetModelScale(am_table.scale_size)
                    hWear["bChangeScale"] : true
                }
            }
        }
    }

    
    hUnit.Slots[sSlotName] = hWear
    
    Wearable.SpecialFixParticles(hUnit, sItemDef, hWear, sSlotName, sStyle)
    Wearable.RefreshSpecial(hUnit)
    
    if ( nModelIndex > 0 ) {
        Wearable.SwitchTinyParticles(hUnit)
    }

    if ( DefaultPrismatic && DefaultPrismatic[sItemDef] && !hUnit.prismatic ) {
        let sPrismaticName = DefaultPrismatic[sItemDef]
        Wearable.SwitchPrismatic(hUnit, sPrismaticName)
    }

    let unit_id = hUnit.GetEntityIndex()
    if ( Wearable.IsDisplayInLoadout(hUnit.sHeroName, sSlotName) ) {
        CustomGameEventManager.Send_ServerToAllClients(
            "UpdateWearable",
            {unit = unit_id, itemDef = sItemDef, itemStyle = sStyle, slotName = sSlotName}
        )
    }

    CustomNetTables.SetTableValue("hero_wearables", tostring(unit_id), hUnit.Slots)
}

 Wear(hUnit, sItemDef, sStyle) {
    if ( type(sItemDef) != "string" ) {
        sItemDef = tostring(sItemDef)
    }

    let hItem = Wearable.items[sItemDef]
    //  print("Wear", sItemDef, hItem, sStyle)

    let sSlotName = Wearable.GetSlotName(sItemDef)
    print(sSlotName, hUnit.bPersona, (!Wearable.IsPersona(sSlotName)), (sSlotName != "persona_selector"))
    if ( hUnit.bPersona && (!Wearable.IsPersona(sSlotName)) && (sSlotName != "persona_selector") ) {
        return
    }

    if ( hItem.prefab == "bundle" ) {
        //  捆绑包
        if ( Wearable.ShouldRespawnForItem(hUnit, sItemDef) ) {
            Wearable._WearRespawn(hUnit, sItemDef)
            return
        }

        for _, sSubItemDef in pairs(Wearable.bundles[sItemDef]) do
            Wearable.Wear(hUnit, sSubItemDef)
        }
        return
    }

    if ( !sStyle ) {
        sStyle = "0"
    } else if ( type(sStyle) != "string" ) {
        sStyle = tostring(sStyle)
    }

    if ( Wearable.ShouldRespawnForItem(hUnit, sItemDef) ) {
        Wearable._WearRespawn(hUnit, sItemDef, sSlotName, sStyle)
    } else {
        Wearable._WearProp(hUnit, sItemDef, sSlotName, sStyle)
    }
}

 WearCourier(hUnit, sItemDef, sStyle, bFlying, bDire) {
    print("WearCourier", hUnit, sItemDef, sStyle, type(sItemDef), type(sStyle), bFlying, bDire)
    let hItem = Wearable.items[sItemDef]

    if ( type(sItemDef) != "string" ) {
        sItemDef = tostring(sItemDef)
    }

    if ( !sStyle ) {
        sStyle = "0"
    } else if ( type(sStyle) != "string" ) {
        sStyle = tostring(sStyle)
    }

    //  删除原有特效
    hUnit.skin = 0
    if ( hUnit["particles"] ) {
        for p_name, p in pairs(hUnit["particles"]) do
            if ( p != false ) {
                ParticleManager.DestroyParticle(p, true)
                ParticleManager.ReleaseParticleIndex(p)
            }
            if ( hUnit["prismatic_particles"] && hUnit["prismatic_particles"][p_name] ) {
                hUnit["prismatic_particles"][p_name] = null
            }
            hUnit["particles"][p_name] = null
        }
    }

    let asset_modifiers = Wearable.asset_modifier[sItemDef]
    if ( asset_modifiers ) {
        if ( asset_modifiers["skin"] ) {
            //  设置模型皮肤
            hUnit.skin = asset_modifiers["skin"]
        }
        for (let am_table of ( asset_modifiers)) {
	 

            if ( am_name == "styles" ) {
                //  不同款式设置模型皮肤
                let style_table = am_table[sStyle]
                if ( style_table && style_table.skin ) {
                    hUnit.skin = style_table.skin
                }
            } else if (
                type(am_table) == "table" && 
                    ((bDire && am_table.asset == "dire") || ((!bDire) && am_table.asset == "radiant"))
             ) {
                if (
                    ((!bFlying) && type(am_table) == "table" && am_table.type == "courier") || 
                        (bFlying && type(am_table) == "table" && am_table.type == "courier_flying")
                 ) {
                    if ( ((!am_table.style) || tostring(am_table.style) == sStyle) ) {
                        let sNewModel = am_table.modifier
                        print(sNewModel)
                        hUnit.SetOriginalModel(sNewModel)
                        hUnit.SetModel(sNewModel)
                    }
                }
            }
        }

        hUnit.SetSkin(hUnit.skin)

        for (let am_table of ( asset_modifiers)) {
	 

            if ( type(am_table) == "table" && am_table.type == "particle_create" ) {
                //  周身特效
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) ) {
                    if ( (!am_table.flying_courier_only) || bFlying ) {
                        if ( ((!am_table.radiant_only) || (!bDire)) && ((!am_table.dire_only) || bDire) ) {
                            let particle_name = am_table.modifier
                            let p = Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)
                            hUnit.particles = hUnit.particles || {}
                            hUnit.particles[particle_name] = p
                        }
                    }
                }
            }
        }
    }

    if ( bFlying && (!hUnit.HasModifier("flying")) ) {
        hUnit.AddNewModifier(hUnit, null, "flying", {})
    } else if ( (!bFlying) && hUnit.HasModifier("flying") ) {
        hUnit.RemoveModifierByName("flying")
    }
}

 WearWard(hUnit, sItemDef, sStyle) {
    print("WearWard", hUnit, sItemDef, sStyle)
    let hItem = Wearable.items[sItemDef]

    if ( !sStyle ) {
        sStyle = "0"
    } else if ( type(sStyle) != "string" ) {
        sStyle = tostring(sStyle)
    }

    //  删除原有特效
    if ( hUnit["particles"] ) {
        for p_name, p in pairs(hUnit["particles"]) do
            if ( p != false ) {
                ParticleManager.DestroyParticle(p, true)
                ParticleManager.ReleaseParticleIndex(p)
            }
            if ( hUnit["prismatic_particles"] && hUnit["prismatic_particles"][p_name] ) {
                hUnit["prismatic_particles"][p_name] = null
            }
            hUnit["particles"][p_name] = null
        }
    }

    let asset_modifiers = Wearable.asset_modifier[sItemDef]
    if ( asset_modifiers ) {
        for (let am_table of ( asset_modifiers)) {
	 

            if ( am_name == "styles" ) {
                //  不同款式设置模型皮肤
                let style_table = am_table[sStyle]
                if ( style_table && style_table.skin ) {
                    hUnit.skin = style_table.skin
                }
            } else if (
                type(am_table) == "table" && am_table.type == "entity_model" && hUnit.GetUnitName() == am_table.asset
             ) {
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) ) {
                    let sNewModel = am_table.modifier
                    print(sNewModel)
                    hUnit.SetOriginalModel(sNewModel)
                    hUnit.SetModel(sNewModel)
                }
            }
        }

        for (let am_table of ( asset_modifiers)) {
	 

            if ( type(am_table) == "table" && am_table.type == "particle_create" ) {
                //  周身特效
                if ( ((!am_table.style) || tostring(am_table.style) == sStyle) ) {
                    let particle_name = am_table.modifier
                    let p = Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)
                    hUnit.particles = hUnit.particles || {}
                    hUnit.particles[particle_name] = p
                }
            }
        }
    }
}

 AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle) {
    print("AddParticle", hUnit, hWear, particle_name, sSlotName, sStyle)
    let attach_type = ParticleAttachment_t.PATTACH_CUSTOMORIGIN
    let attach_entity = hUnit
    if ( hWear && hWear["model"] ) {
        attach_entity = hWear["model"]
    }
    let p_table = Wearable.control_points[particle_name]
    if ( p_table ) {
        if ( p_table.attach_type ) {
            attach_type = attach_map[p_table.attach_type]
        }
        if ( p_table.attach_entity == "parent" ) {
            attach_entity = hUnit
        }
    }

    let p = ParticleManager.CreateParticle(particle_name, attach_type, attach_entity)

    if ( p_table && p_table["control_points"] ) {
        let cps = p_table["control_points"]
        for (let cp_table of ( cps)) {
	 

            if ( (!cp_table.style) || tostring(cp_table.style) == sStyle ) {
                let control_point_index = cp_table.control_point_index
                attach_type = cp_table.attach_type
                if ( attach_type == "vector" ) {
                    //  控制点设置向量
                    let vPosition = String2Vector(cp_table.cp_position)
                    //  print(p, control_point_index, vPosition)
                    ParticleManager.SetParticleControl(p, control_point_index, vPosition)
                } else {
                    //  控制点绑定实体
                    let inner_attach_entity = attach_entity
                    let attachment = cp_table.attachment
                    if ( cp_table.attach_entity == "parent" ) {
                        inner_attach_entity = hUnit
                    } else if ( cp_table.attach_entity == "this" && hWear && hWear["model"] ) {
                        inner_attach_entity = hWear["model"]
                    }
                    let position = hUnit.GetAbsOrigin()
                    if ( cp_table.position ) {
                        position = String2Vector(cp_table.position)
                    }
                    attach_type = attach_map[attach_type]

                    //  绑定饰品模型，且attachment为空饰品没attachment会让特效消失
                    if ( cp_table.attach_entity != "this" || attachment ) {
                        //  print(p, control_point_index, inner_attach_entity, attach_type, attachment, position)
                        ParticleManager.SetParticleControlEnt(
                            p,
                            control_point_index,
                            inner_attach_entity,
                            attach_type,
                            attachment,
                            position,
                            true
                        )
                    }
                }
            }
        }
    }

    if ( PrismaticParticles[particle_name] ) {
        hUnit["prismatic_particles"] = hUnit["prismatic_particles"] || {}
        if ( hUnit["prismatic_particles"][particle_name] ) {
            hUnit["prismatic_particles"][particle_name].particle_index = p
        } else {
            hUnit["prismatic_particles"][particle_name] = {
                particle_index = p,
                slot_name = sSlotName,
                style = sStyle
            }
        }

        if ( hUnit.prismatic && Wearable.CanPrismatic(particle_name, hUnit.prismatic) ) {
            let sHexColor = Wearable.prismatics[hUnit.prismatic].hex_color
            let vColor = HexColor2RGBVector(sHexColor)
            ParticleManager.SetParticleControl(p, 16, Vector(1, 0, 0))
            ParticleManager.SetParticleControl(p, 15, vColor)
        }
    }

    //  print(particle_name, p)
    //  虚灵特效没有hWear
    if ( hWear ) {
        hWear["particles"][particle_name] = p
    }
    return p
}

 CanPrismatic(sParticle, sPrismatic) {
    if ( sParticle == "particles/econ/courier/courier_trail_lava/courier_trail_lava.vpcf" && sPrismatic == "unusual_red") {
        return false
    }
    return true
}

//  切换棱彩宝石，如果切换的是已有的则去除
 SwitchPrismatic(hUnit, sPrismaticName) {
    print("SwitchPrismatic", hUnit.prismatic, sPrismaticName)
    if ( hUnit.prismatic == sPrismaticName ) {
        Wearable.RemovePrismatic(hUnit)
        return
    }

    let projectile = hUnit.GetRangedProjectileName()
    if (
        !hUnit["prismatic_particles"] && !PrismaticParticles[projectile] && 
            !(hUnit.Slots && hUnit.Slots["summon"] && hUnit.Slots["summon"]["itemDef"] == "7380")
     ) {
        Notifications.BottomToAll(
            {
                text : "NoPrismaticParticle",
                duration : 3,
                style : {
                    color : "white",
                    ["font-size"] : "30px",
                    ["background-color"] : "rgb(136, 34, 34)",
                    opacity : "0.5"
                }
            }
        )

        return
    }

    hUnit.prismatic = sPrismaticName
    let sHexColor = Wearable.prismatics[sPrismaticName].hex_color
    let vColor = HexColor2RGBVector(sHexColor)

    if ( hUnit["prismatic_particles"] ) {
        for particle_name, p_table in pairs(hUnit["prismatic_particles"]) do
            if ( !p_table.hidden ) {
                let particle_index = p_table.particle_index
                let sSlotName = p_table.slot_name
                let sStyle = p_table.style
                let hWear = null
                if ( hUnit.Slots ) {
                    hWear = hUnit.Slots[sSlotName]
                }
                //  if ( hWear["model"] ) {
                //      hWear["model"]:SetRenderColor(vColor.x, vColor.y, vColor.z)
                //  }
                if ( particle_index != false ) {
                    ParticleManager.DestroyParticle(particle_index, true)
                    ParticleManager.ReleaseParticleIndex(particle_index)
                }
                let new_p_index = Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)

                if ( Wearable.CanPrismatic(particle_name, sPrismaticName) ) {
                    ParticleManager.SetParticleControl(new_p_index, 16, Vector(1, 0, 0))
                    ParticleManager.SetParticleControl(new_p_index, 15, vColor)
                }

                p_table.particle_index = new_p_index
                if ( hWear ) {
                    hWear["particles"][particle_name] = new_p_index
                }

                let sEtherealName = EtherealParticle2Names[particle_name]
                if ( sEtherealName ) {
                    hUnit.ethereals[sEtherealName] = new_p_index
                }
            }
        }
    }

    CustomNetTables.SetTableValue("hero_prismatic", tostring(hUnit.GetEntityIndex()), {prismatic_name = sPrismaticName})
}

//  移除棱彩宝石
 RemovePrismatic(hUnit) {
    print("RemovePrismatic")
    hUnit.prismatic = null

    if ( hUnit["prismatic_particles"] ) {
        for particle_name, p_table in pairs(hUnit["prismatic_particles"]) do
            let particle_index = p_table.particle_index
            let sSlotName = p_table.slot_name
            let sStyle = p_table.style
            let hWear = null
            if ( hUnit.Slots ) {
                hWear = hUnit.Slots[sSlotName]
            }
            if ( particle_index != false ) {
                ParticleManager.DestroyParticle(particle_index, true)
                ParticleManager.ReleaseParticleIndex(particle_index)
            }
            let new_p_index = Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)

            p_table.particle_index = new_p_index
            if ( hWear ) {
                hWear["particles"][particle_name] = new_p_index
            }

            let sEtherealName = EtherealParticle2Names[particle_name]
            if ( sEtherealName ) {
                hUnit.ethereals[sEtherealName] = new_p_index
            }
        }
    }

    CustomNetTables.SetTableValue("hero_prismatic", tostring(hUnit.GetEntityIndex()), {prismatic_name = null})
}

//  开关虚灵宝石
 ToggleEthereal(hUnit, sEtherealName) {
    print("ToggleEthereal", hUnit, sEtherealName)
    hUnit.ethereals = hUnit.ethereals || {}
    let particle_name = EtherealParticles[sEtherealName]
    if ( !hUnit.ethereals[sEtherealName] ) {
        let p_index = Wearable.AddParticle(hUnit, null, particle_name, null, "0")
        if ( hUnit.prismatic && Wearable.CanPrismatic(particle_name, hUnit.prismatic) ) {
            let sHexColor = Wearable.prismatics[hUnit.prismatic].hex_color
            let vColor = HexColor2RGBVector(sHexColor)
            ParticleManager.SetParticleControl(p_index, 16, Vector(1, 0, 0))
            ParticleManager.SetParticleControl(p_index, 15, vColor)
        }
        hUnit.ethereals[sEtherealName] = p_index
    } else {
        let p_index = hUnit.ethereals[sEtherealName]
        if ( p_index != false ) {
            ParticleManager.DestroyParticle(p_index, true)
            ParticleManager.ReleaseParticleIndex(p_index)
        }
        hUnit.ethereals[sEtherealName] : false
        hUnit["prismatic_particles"][particle_name] = null
    }

    CustomNetTables.SetTableValue("hero_ethereals", tostring(hUnit.GetEntityIndex()), hUnit.ethereals)
}

//  重置宝石
 ResetGems(hUnit) {
    if ( !hUnit.ethereals ) {
        return
    }
    for (let p_index of ( hUnit.ethereals)) {
	 

        if ( p_index ) {
            Wearable.ToggleEthereal(hUnit, sEtherealName)
        }
    }
    Wearable.RemovePrismatic(hUnit)
}

//  预读取单位饰品
 UICacheAvailableItems(sUnitName) {
    let sHeroName = string.gsub(sUnitName, "npc_dota_unit", "npc_dota_hero")
    if ( !CustomNetTables.GetTableValue("hero_available_items", sUnitName) ) {
        CustomNetTables.SetTableValue("hero_available_items", sUnitName, Wearable.heroes[sHeroName])
    }
    //  PrintTable(CustomNetTables.GetTableValue("hero_available_items", sUnitName))
}

//  预读取信使饰品
 UICacheAvailableCouriers() {
    if ( !CustomNetTables.GetTableValue("other_available_items", "courier") ) {
        CustomNetTables.SetTableValue("other_available_items", "courier", Wearable.couriers)
    }
    //  PrintTable(CustomNetTables.GetTableValue("other_available_items", "courier"))
}

//  预读取守卫饰品
 UICacheAvailableWards() {
    if ( !CustomNetTables.GetTableValue("other_available_items", "ward") ) {
        CustomNetTables.SetTableValue("other_available_items", "ward", Wearable.wards)
    }
    //  PrintTable(CustomNetTables.GetTableValue("other_available_items", "courier"))
}

//  复制英雄饰品
 WearLike(hUnitOrigin, hUnitNew) {
    let hHeroSlots = Wearable.heroes[hUnitNew.sHeroName]
    hUnitNew.Slots = {}

    for (let hWear of ( hUnitOrigin.Slots)) {
	 

        Wearable.Wear(hUnitNew, hWear["itemDef"], hWear["style"])
    }

    let unit_index = hUnitNew.GetEntityIndex()
    CustomNetTables.SetTableValue("hero_wearables", tostring(unit_index), hUnitNew.Slots)
}

//  隐藏英雄饰品
 HideWearables(hUnit) {
    //  print("HideWearable", hUnit.Slots, IsServer())
    for (let hWear of ( hUnit.Slots)) {
	 

        if ( hWear["model"] ) {
            hWear["model"]:AddEffects(EntityEffects.EF_NODRAW)
        }
        for p_name, p in pairs(hWear["particles"]) do
            if ( p != false ) {
                ParticleManager.DestroyParticle(p, true)
                ParticleManager.ReleaseParticleIndex(p)
            }
            if ( hUnit["prismatic_particles"] && hUnit["prismatic_particles"][p_name] ) {
                hUnit["prismatic_particles"][p_name].hidden = true
            }
        }
        if ( hWear["additional_wearable"] ) {
            for _, prop in pairs(hWear["additional_wearable"]) do
                if ( prop && IsValidEntity(prop) ) {
                    prop.AddEffects(EntityEffects.EF_NODRAW)
                }
            }
        }
    }
}

//  显示英雄饰品
 ShowWearables(hUnit) {
    //  print("ShowWearables", hUnit.Slots, IsServer())
    for (let hWear of ( hUnit.Slots)) {
	 

        if ( hWear["model"] ) {
            hWear["model"]:RemoveEffects(EntityEffects.EF_NODRAW)
        }
        for p_name, p in pairs(hWear["particles"]) do
            if ( hUnit["prismatic_particles"] && hUnit["prismatic_particles"][p_name] ) {
                hUnit["prismatic_particles"][p_name].hidden = false
            }
            let new_p = Wearable.AddParticle(hUnit, hWear, p_name, sSlotName, hWear["style"])
        }
        if ( hWear["additional_wearable"] ) {
            for _, prop in pairs(hWear["additional_wearable"]) do
                if ( prop && IsValidEntity(prop) ) {
                    prop.RemoveEffects(EntityEffects.EF_NODRAW)
                }
            }
        }
    }
}

//  换装搭配
 WearCombination(hUnit, sCombinationID) {
    let sHeroName = hUnit.sHeroName
    if ( !type(sCombinationID) == "string" ) {
        sCombinationID = tostring(sCombinationID)
    }
    let hCombination = Wearable.combination[sCombinationID]
    let nHeroID = DOTAGameManager.GetHeroIDByName(hUnit.sHeroName)
    if ( nHeroID != tonumber(hCombination.heroID) ) {
        return
    }
    if ( Wearable.ShouldRespawnForCombination(hUnit, hCombination) ) {
        let hNewWears = {}

        for (let nSlotIndex = 0; nSlotIndex <= 10 ; nSlotIndex++) {
            let nItemDef = hCombination["itemDef" + nSlotIndex]
            let sStyle = hCombination["style" + nSlotIndex]
            let sSlotName = Wearable.GetSlotNameBySlotIndex(sHeroName, nSlotIndex)
            if ( sSlotName && nItemDef != 0 && nItemDef != "0" ) {
                hNewWears[sSlotName] = {sItemDef = tostring(nItemDef), sStyle = sStyle}
            }
        }
        Wearable._WearItemsRespawn(hUnit, hNewWears)
    } else {
        for (let nSlotIndex = 0; nSlotIndex <= 10 ; nSlotIndex++) {
            let nItemDef = hCombination["itemDef" + nSlotIndex]
            let sStyle = hCombination["style" + nSlotIndex]
            let sSlotName = Wearable.GetSlotNameBySlotIndex(sHeroName, nSlotIndex)
            if ( sSlotName && nItemDef != 0 && nItemDef != "0" ) {
                Wearable._WearProp(hUnit, tostring(nItemDef), sSlotName, sStyle)
            }
        }
        let unit_index = hUnit.GetEntityIndex()
        CustomNetTables.SetTableValue("hero_wearables", tostring(unit_index), hUnit.Slots)
    }
}

//  缓存搭配
 CacheCombination(hCombination) {
    hCombination.combinationID = tostring(hCombination.combinationID)
    Wearable.combination[hCombination.combinationID] = hCombination
}

 CacheCombinationPage(hPage) {
    for (let hCombination of ( hPage )) {

        Wearable.CacheCombination(hCombination)
    }
}

 SwitchTinyModel(hTiny, nModelIndex) {
    if ( hTiny.nModelIndex == nModelIndex ) {
        return
    }
    hTiny.nModelIndex = nModelIndex
    let sModel = hTiny["Model" + nModelIndex]
    print("SwitchTinyModel", nModelIndex, sModel)
    hTiny.SetOriginalModel(sModel)
    hTiny.SetModel(sModel)
    Wearable.SwitchTinyParticles(hTiny)
}

 SwitchTinyParticles(hTiny) {
    let nModelIndex = hTiny.nModelIndex
    print("SwitchTinyParticles", nModelIndex)
    //  PrintTable(hTiny)
    for (let i = 1; i <= 4 ; i++) {
        if ( i == nModelIndex && hTiny["Particles" + i] ) {
            for p_name, p_table in pairs(hTiny["Particles" + i]) do
                print("remove", i, nModelIndex, p_name)
                ParticleManager.DestroyParticle(p_table.pid, true)
                ParticleManager.ReleaseParticleIndex(p_table.pid)
                if ( p_table.hWearParticles[p_name] ) {
                    print("recreate", i, p_table.pid, p_name)
                    p_table.pid = p_table.recreate()
                }
            }
        } else {
            for p_name, p_table in pairs(hTiny["Particles" + i]) do
                print("remove", i, nModelIndex, p_table.pid)
                ParticleManager.DestroyParticle(p_table.pid, true)
                ParticleManager.ReleaseParticleIndex(p_table.pid)
            }
        }
    }
}

 SetTinyDefaultModel(hTiny, sItemDef) {
    let nModelIndex = -1
    if ( sItemDef == "679" ) {
        nModelIndex = 1
    } else if ( sItemDef == "680" ) {
        nModelIndex = 2
    } else if ( sItemDef == "681" ) {
        nModelIndex = 3
    } else if ( sItemDef == "682" ) {
        nModelIndex = 4
    }
    if ( nModelIndex > 0 ) {
        let sModel = "models/heroes/tiny/tiny_0" + nModelIndex + "/tiny_0" + nModelIndex + ".vmdl"
        hTiny["Model" + nModelIndex] = sModel
        if ( nModelIndex == hTiny.nModelIndex ) {
            hTiny.SetOriginalModel(sModel)
            hTiny.SetModel(sModel)
        }
    }
}

 SpecialFixAnim(hUnit, sItemDef) {
    if ( sItemDef == "9972" ) {
        //  修复猛犸凶残螺旋战盔动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "12412" ) {
        //  } else if ( sItemDef == "7930" ) {
        //      //  修复军团不朽战棋
        //      return "GameActivity_t.ACT_DOTA_IDLE"
        //  修复萨尔不朽武器
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "12414" ) {
        //  修复沉默不朽武器
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13530" || sItemDef == "13527" ) {
        //  修复灵象硝骑
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "12955" ) {
        //  修复骨法不朽武器
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7581" ) {
        //  修复伐木机不朽武器
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "12927" || sItemDef == "13523" ) {
        //  修复伐木机不朽盘子
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9462" ) {
        //  修复冰魂不朽肩
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "12977" ) {
        //  修复戴泽花月法杖
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13266" ) {
        //  修复拉比克虚幻之镜法杖
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13483" ) {
        //  修复尸王蠕行藤曼护体动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13767" ) {
        //  修复帕克不朽翅膀动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13777" ) {
        //  修复修补匠不朽右臂动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13778" ) {
        //  修复美杜莎不朽尾巴动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13788" ) {
        //  修复屠夫千劫神勾动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14283" ) {
        //  修复赏金不仁之猎-飞禽动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14277" ) {
        //  修复先知神明之印动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "12956" ) {
        //  修复术士烈影之铭动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14967" ) {
        //  修复飞机不朽导弹动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14954" ) {
        //  修复神谕不朽头动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14992" ) {
        //  修复发条不朽武器动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14000" || sItemDef == "13998" ) {
        //  修复术士流放到感恩动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14163" || sItemDef == "14165" ) {
        //  修复冰魂释放天启动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9747" || sItemDef == "12424" ) {
        //  修复冥魂大帝不朽武器
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7810" || sItemDef == "7813" ) {
        //  修复编织者不朽触角
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13755" || sItemDef == "14965" ) {
        //  修复帕格纳不朽头
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9059" ) {
        //  修复主宰至宝动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9235" ) {
        //  修复小精灵至宝动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7571" ) {
        //  修复虚空不朽武器动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7375" ) {
        //  修复海民不朽企鹅动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9241" ) {
        //  修复血魔不朽头动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7809" ) {
        //  修复沙王不朽手臂动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9196" || sItemDef == "9452" ) {
        //  修复大树不朽动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9971" ) {
        //  修复猛犸凶残螺旋长角动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9970" ) {
        //  修复猛犸凶残螺钻铁槌动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7910" ) {
        //  修复蓝胖不朽背部动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "12792" ) {
        //  修复巫妖邪会仪式意念动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9756" ) {
        //  修复巫妖不朽武器动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9089" ) {
        //  修复死灵法不朽武器动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9704" ) {
        //  修复大树霜褐影匿庇护
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14944" ) {
        //  修复熊战士北辰灭世
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "13933" ) {
        //  修复天怒天神之秘武器动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14750" ) {
        //  修复谜团无限进化护甲动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14449" || sItemDef == "14451" ) {
        //  修复光法盗贼之王动作
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9741" ) {
        //  修复末日不朽手臂动作 其他动作还没支持 会随机出现受伤状态bug
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7427" || sItemDef == "7508" ) {
        //  修复死灵法不朽肩部动作 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( hUnit.sHeroName == "npc_dota_hero_huskar" && Wearable.GetSlotName(sItemDef) == "weapon" ) {
        //  修复神灵投矛 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( hUnit.sHeroName == "npc_dota_hero_enchantress" && Wearable.GetSlotName(sItemDef) == "weapon" ) {
        //  修复小鹿投矛 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "8004" || sItemDef == "8038" || sItemDef == "8010" ) {
        //  修复屠夫不朽勾 其他动作还没支持 会随机出现受伤状态bug
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "7509" || sItemDef == "8376" ) {
        //  修复黑鸟不朽武器 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9740" || sItemDef == "12299" ) {
        //  修复黑贤不朽手臂 其他动作还没支持
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "9662" ) {
        //  修复幽鬼至宝
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14242" ) {
        //  修复大牛不朽武器
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "19155" || sItemDef == "19152" ) {
        //  巫医孢父健步
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "18979" || sItemDef == "18974" ) {
        //  飞机玄奥逆变
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14900" ) {
        //  先知大漠奇花
        return "GameActivity_t.ACT_DOTA_IDLE"
    } else if ( sItemDef == "14960" || sItemDef == "19023" ) {
        //  修复潮汐背部不朽
        return "GameActivity_t.ACT_DOTA_IDLE"
    }
    return null
}

 GetPropClass(hUnit, sItemDef) {
    if ( sItemDef == "4810" ) {
        //  蝙蝠不良头巾需要物理
        return "prop_physics"
    }
    return "prop_dynamic"
}

//  修复替换型的特殊周身特效
 SpecialFixParticles(hUnit, sItemDef, hWear, sSlotName, sStyle) {
    if ( sItemDef == "12588" ) {
        let particle_name = "particles/econ/items/lanaya/princess_loulan/princess_loulan_weapon.vpcf"
        Wearable.AddParticle(hUnit, hWear, particle_name, sSlotName, sStyle)
    }
}

if ( !Wearable.heroes ) {
    Wearable.Init()
    Wearable.PostInit()
}
