LinkLuaModifier("modifier_kingkong_8", "abilities/boss/kingkong_8.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_kingkong_8_rush", "abilities/boss/kingkong_8.lua", LUA_MODIFIER_MOTION_HORIZONTAL)
// Abilities
if ( kingkong_8 == null ) {
	kingkong_8 = class({})
}
 OnAbilityPhaseStart() {
	let hCaster = this.GetCasterPlus()
	let vCasterLoc = hCaster.GetAbsOrigin()
	//  播放动作
	hCaster.StartGestureWithPlaybackRate(GameActivity_t.ACT_DOTA_DEFEAT, 2)
	if ( IsServer() ) {
		//  播放伤害预警
		let flDistance = this.GetSpecialValueFor("distance")
		let flRadius = this.GetSpecialValueFor("radius")
		let vForward = hCaster.GetForwardVector()
		let tPosition = {
			vCasterLoc + Rotation2D(vForward, math.rad(0)) * flDistance,
			vCasterLoc + Rotation2D(vForward, math.rad(90)) * flDistance,
			vCasterLoc + Rotation2D(vForward, math.rad(180)) * flDistance,
			vCasterLoc + Rotation2D(vForward, math.rad(270)) * flDistance,
		}
		this.tParticleID = {}
		for (let i = 1; i <= tPosition.length ; i++) {
			let iParticleID = ParticleManager.CreateParticle("particles/units/boss/damage_line.vpcf", ParticleAttachment_t.PATTACH_CUSTOMORIGIN, null)
			ParticleManager.SetParticleControl(iParticleID, 0, vCasterLoc)
			ParticleManager.SetParticleControl(iParticleID, 1, tPosition[i])
			ParticleManager.SetParticleControl(iParticleID, 2, Vector(flRadius, 0, 0))
			table.insert(this.tParticleID, iParticleID)
		}
		this.hModifier = hCaster.AddBuff(hCaster, BUFF_TYPE.TENACITY, this.GetCastPoint())
	}
	return true
}
 OnAbilityPhaseInterrupted() {
	//  清空特效
	for (let iParticleID of ( this.tParticleID)) {
	 

		ParticleManager.DestroyParticle(iParticleID, false)
	}
	this.GetCasterPlus().FadeGesture(GameActivity_t.ACT_DOTA_DEFEAT)
}
 OnSpellStart() {
	//  清空特效
	for (let iParticleID of ( this.tParticleID)) {
	 

		ParticleManager.DestroyParticle(iParticleID, false)
	}
	this.GetCasterPlus().FadeGesture(GameActivity_t.ACT_DOTA_DEFEAT)
	let hCaster = this.GetCasterPlus()
	let vPosition = this.GetCursorPosition()

	let vCasterLoc = hCaster.GetAbsOrigin()
	let vForward = hCaster.GetForwardVector()
	let flDistance = this.GetSpecialValueFor("distance")
	let tPosition = {
		vCasterLoc + Rotation2D(vForward, math.rad(0)) * flDistance,
		vCasterLoc + Rotation2D(vForward, math.rad(90)) * flDistance,
		vCasterLoc + Rotation2D(vForward, math.rad(180)) * flDistance,
		vCasterLoc + Rotation2D(vForward, math.rad(270)) * flDistance,
	}
	for (let i = 1; i <= tPosition.length ; i++) {
		let hIllusion = CreateUnitByName(hCaster.GetUnitName(), vCasterLoc, false, hCaster, hCaster, hCaster.GetTeamNumber())
		hIllusion.SetForwardVector((tPosition[i] - vCasterLoc).Normalized())
		hIllusion.MakeIllusion()
		hIllusion.AddNewModifier(hCaster, this, "modifier_kingkong_8_rush", { vPosX = tPosition[i].x, vPosY = tPosition[i].y })
	}
	hCaster.EmitSound("Hero_Magnataur.Skewer.Cast")
}
 GetIntrinsicModifierName() {
	return "modifier_kingkong_8"
}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // -
// Modifiers
if ( modifier_kingkong_8 == null ) {
@registerModifier()
export class 	modifier_kingkong_8 extends BaseModifier_Plus {
}
 IsHidden() {
	return true
}
 OnCreated(params: IModifierTable) {
	this.trigger_time = this.GetSpecialValueFor("trigger_time")
	if ( IsServer() ) {
		this.StartIntervalThink(this.trigger_time)
	}
}
 EDeclareFunctions() {
	return {
		@registerEvent(Enum_MODIFIER_EVENT.ON_DEATH
	}
}
 OnDeath(params: IModifierTable) {
	if ( IsServer() && params.unit.IsFriendly(this.GetParentPlus()) == false ) {
		this.StartIntervalThink(this.trigger_time)
	}
}
 OnIntervalThink() {
	let hParent = this.GetParentPlus()
	if ( this.GetParentPlus().IsAbilityReady(this.GetAbilityPlus()) ) {
		ExecuteOrderFromTable({
			UnitIndex : this.GetParentPlus().entindex(),
			OrderType : dotaunitorder_t.DOTA_UNIT_ORDER_CAST_POSITION,
			AbilityIndex : this.GetAbilityPlus().entindex(),
			Position : this.GetParentPlus().GetAbsOrigin() + this.GetParentPlus().GetForwardVector()
		})
	}
}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // -
if ( modifier_kingkong_8_rush == null ) {
	modifier_kingkong_8_rush = class({}, null, HorizontalModifier)
}
 GetEffectAttachType() {
	return ParticleAttachment_t.PATTACH_ABSORIGIN_FOLLOW
}
 GetPriority() {
	return DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST
}
 OnCreated(params: IModifierTable) {
	if ( IsServer() ) {
		if ( !this.ApplyHorizontalMotionController() ) {
			this.Destroy()
			return
		}
		this.distance = this.GetSpecialValueFor('distance')
		this.fSpeed = this.GetSpecialValueFor('speed')
		this.vS = this.GetParentPlus().GetAbsOrigin()
		this.vV = (Vector(params.vPosX, params.vPosY, 0) - this.vS).Normalized() * this.fSpeed
		this.radius = this.GetSpecialValueFor('radius')
		this.impact_damage = this.GetSpecialValueFor("damage")
		this.knockback_duration = this.GetSpecialValueFor("knockback_duration")
		this.knockback_distance = this.GetSpecialValueFor("knockback_distance")
		this.knockback_height = this.GetSpecialValueFor("knockback_height")
		this.tTargets = {}
	} else {
		let iParticleID = ParticleManager.CreateParticle("particles/units/boss/kingkong/kingkong_6.vpcf", ParticleAttachment_t.PATTACH_ABSORIGIN_FOLLOW, this.GetParentPlus())
		this.AddParticle(iParticleID, false, false, -1, false, false)
		let iParticleID = ParticleManager.CreateParticle("particles/units/boss/kingkong/kingkong_6_rush.vpcf", ParticleAttachment_t.PATTACH_CENTER_FOLLOW, this.GetParentPlus())
		this.AddParticle(iParticleID, false, false, -1, false, false)
	}
}
 OnDestroy(params: IModifierTable) {
	if ( IsServer() ) {
		this.GetParentPlus().RemoveHorizontalMotionController(this)
		for (let hUnit of ( this.tTargets )) {

			if ( IsValid(hUnit) ) {
				FindClearSpaceForUnit(hUnit, hUnit.GetAbsOrigin(), true)
			}
		}
		if ( this.GetParentPlus().IsIllusion() ) {
			this.GetParentPlus().AddNoDraw()
			this.GetParentPlus().ForceKill(false)
		}
	}
}
 UpdateHorizontalMotion(me:BaseNpc_Plus, dt:number) {
	if ( IsServer() ) {
		let vPos = this.vV * dt + this.GetParentPlus().GetAbsOrigin()
		let fDis = (vPos - this.vS).Length2D()
		if ( fDis > this.distance || GridNav.CanFindPath(this.GetParentPlus().GetAbsOrigin(), vPos) == false ) {
			fDis = this.distance
		}
		me.SetAbsOrigin(vPos)

		let tTargets = FindUnitsInRadius(me.GetTeamNumber(), vPos, null, this.radius, DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_HERO, DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NONE, FindOrder.FIND_ANY_ORDER, false)
		for (let hUnit of ( tTargets )) {

			if ( TableFindKey(this.tTargets, hUnit) == null ) {
				table.insert(this.tTargets, hUnit)
				let tDamageInfo = {
					attacker : this.GetCasterPlus(),
					victim : hUnit,
					ability : this.GetAbilityPlus(),
					damage : this.impact_damage,
					damage_type : this.GetAbilityPlus().GetAbilityDamageType()
				}
				ApplyDamage(tDamageInfo)

				me.KnockBack(me.GetAbsOrigin(), hUnit, this.knockback_distance, this.knockback_height, this.knockback_duration, true)
				let iParticleID = ParticleManager.CreateParticle("particles/units/heroes/hero_spirit_breaker/spirit_breaker_greater_bash.vpcf", ParticleAttachment_t.PATTACH_ABSORIGIN_FOLLOW, hUnit)
				this.AddParticle(iParticleID, false, false, -1, false, false)
			}
		}

		if ( fDis == this.distance ) {
			this.Destroy()
		}
	}
}
 OnHorizontalMotionInterrupted() {
	if ( IsServer() ) {
		this.Destroy()
	}
}
 DeclareFunctions() {
	return {
		@registerProp(PropertyConfig.EMODIFIER_PROPERTY.OVERRIDE_ANIMATION,
		@registerProp(PropertyConfig.EMODIFIER_PROPERTY.OVERRIDE_ANIMATION_RATE,
		@registerProp(PropertyConfig.EMODIFIER_PROPERTY.TRANSLATE_ACTIVITY_MODIFIERS
	}
}
 GetOverrideAnimation(params: IModifierTable) {
	return GameActivity_t.ACT_DOTA_RUN
}
 GetOverrideAnimationRate(params: IModifierTable) {
	return 2.5
}
 GetActivityTranslationModifiers(params: IModifierTable) {
	return "haste"
}
 CheckState() {
	return {
		[modifierstate.MODIFIER_STATE_STUNNED] : true,
		[modifierstate.MODIFIER_STATE_NO_HEALTH_BAR] : true,
		[modifierstate.MODIFIER_STATE_INVULNERABLE] : true,
		[modifierstate.MODIFIER_STATE_OUT_OF_GAME] : true,
		[modifierstate.MODIFIER_STATE_UNSELECTABLE] : true,
		[modifierstate.MODIFIER_STATE_UNTARGETABLE] : true,
	}
}