//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export class Vector2 {
    static deserializeFromJson(json: any): Vector2 {
        let x = json.x
        let y = json.y
        if (x == null || y == null) {
            GLogHelper.error(1);
        }
        return new Vector2(x, y)
    }

    x: number
    y: number
    constructor(x: number = 0, y: number = 0) {
        this.x = x
        this.y = y
    }
}

export class Vector3 {
    static deserializeFromJson(json: any): Vector3 {
        let x = json.x
        let y = json.y
        let z = json.z
        if (x == null || y == null || z == null) {
            GLogHelper.error(1);
        }
        return new Vector3(x, y, z)
    }

    x: number
    y: number
    z: number

    constructor(x: number = 0, y: number = 0, z: number = 0) {
        this.x = x
        this.y = y
        this.z = z
    }
}

export class Vector4 {
    static deserializeFromJson(json: any): Vector4 {
        let x = json.x
        let y = json.y
        let z = json.z
        let w = json.w
        if (x == null || y == null || z == null || w == null) {
            GLogHelper.error(1);
        }
        return new Vector4(x, y, z, w)
    }
    
    x: number
    y: number
    z: number
    w: number

    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {
        this.x = x
        this.y = y
        this.z = z
        this.w = w
    }
}


export namespace EEnum {
export enum EMoneyType {
    /**
     * 空值
     */
    None = 0,
    /**
     * 金币
     */
    Gold = 1,
    /**
     * 木材
     */
    Wood = 2,
    /**
     * 魂晶
     */
    SoulCrystal = 3,
    /**
     * 人口
     */
    Population = 4,
    /**
     * 原石
     */
    MetaStone = 101,
    /**
     * 星石
     */
    StarStone = 102,
    /**
     * 钱
     */
    Money = 103,
    /**
     * 通用英雄经验
     */
    ComHeroExp = 104,
    /**
     * 铭文碎片
     */
    MingWenExp = 105,
}
}

export namespace EEnum {
export enum ESellRefreshType {
    /**
     * 不刷新
     */
    None = 0,
    /**
     * 每天
     */
    EveryDay = 1,
    /**
     * 每周
     */
    EveryWeek = 2,
    /**
     * 每月
     */
    EveryMonth = 3,
    /**
     * 每年
     */
    EveryYear = 4,
    /**
     * 每小时
     */
    EveryHour = 5,
    /**
     * 每赛季
     */
    EverySeason = 6,
}
}

export namespace EEnum {
export enum EActivityType {
    /**
     * 7日登录
     */
    TActivitySevenDayLogin = 1,
    /**
     * 每月登录
     */
    TActivityMonthLogin = 2,
    /**
     * 战令
     */
    TActivityBattlePass = 3,
    /**
     * 月卡
     */
    TActivityMemberShip = 4,
    /**
     * 英雄等级
     */
    TActivityHeroRecordLevel = 5,
    /**
     * 每日奖励
     */
    TActivityDailyOnlinePrize = 6,
    /**
     * 原石骰子
     */
    TActivityInvestMetaStone = 7,
    TActivityTotalGainMetaStone = 8,
    TActivityTotalOnlineTime = 9,
    TActivityTotalSpendMetaStone = 10,
    /**
     * 兑换码
     */
    TActivityGiftCommond = 11,
    TActivityMentorshipTree = 12,
    ServerZoneActivityMax = 1000,
}
}

export namespace EEnum {
export enum EItemType {
    /**
     * 道具
     */
    None = 0,
    /**
     * 装备
     */
    Equip = 1,
    /**
     * 礼包
     */
    Treasure = 2,
    /**
     * 限时道具
     */
    TimeItem = 3,
    /**
     * 信使
     */
    Courier = 4,
    /**
     * 祝福
     */
    Buff = 5,
    /**
     * 铭文
     */
    MingWen = 6,
    /**
     * 皮肤
     */
    Skin = 7,
}
}

export namespace EEnum {
export enum ERarity {
    /**
     * 空值
     */
    None = 0,
    /**
     * 稀有度D
     */
    D = 1,
    /**
     * 稀有度C
     */
    C = 2,
    /**
     * 稀有度B
     */
    B = 3,
    /**
     * 稀有度A
     */
    A = 4,
    /**
     * 稀有度R
     */
    R = 5,
    /**
     * 稀有度S
     */
    S = 10,
    /**
     * 稀有度SS
     */
    SS = 11,
    /**
     * 稀有度SSR
     */
    SSR = 12,
}
}

export namespace EEnum {
export enum EBagSlotType {
    /**
     * 允许叠加
     */
    AllowMany = 0,
    /**
     * 禁止叠加
     */
    ForbidMany = 1,
    /**
     * 不占格子
     */
    NoSlot = 2,
}
}

export namespace EEnum {
export enum EItemUseScript {
    /**
     * 空值
     */
    None = 0,
    /**
     * 获取奖励
     */
    GetPrize = 1,
    /**
     * 穿戴
     */
    DressUp = 2,
    /**
     * 祝福Buff
     */
    AddBuff = 3,
    /**
     * 消耗数量
     */
    CostCount = 4,
}
}

export namespace EEnum {
export enum EItemAwakeScript {
    /**
     * 空值
     */
    None = 0,
    /**
     * 添加英雄经验
     */
    AddHeroExp = 1,
    /**
     * 添加称号
     */
    AddTitle = 2,
    /**
     * 穿戴装备
     */
    BindEquip = 3,
    /**
     * 检查唯一转化成星石
     */
    OwnedToStarStone = 4,
    /**
     * 激活皮肤
     */
    ActiveSkin = 5,
}
}

export namespace EEnum {
export enum EShopPriceType {
    /**
     * 国内价格
     */
    ChinaPrice = 0,
    /**
     * 海外价格
     */
    OverSeaPrice = 1,
}
}

export namespace EEnum {
export enum EEnemyCreateType {
    /**
     * 默认创建
     */
    None = 0,
    /**
     * 召唤的战斗怪
     */
    SummedBattle = 1,
    /**
     * 召唤的偷蛋怪
     */
    SummedEgg = 2,
    /**
     * 随机替换怪
     */
    RandomReplace = 3,
    /**
     * 数据绑定匹配敌人
     */
    DataDriver = 4,
    /**
     * 共同的敌人
     */
    PublicEnemy = 5,
}
}

export namespace EEnum {
export enum EEquipSolt {
    /**
     * 空值
     */
    None = 0,
    /**
     * 神杖
     */
    Scepter = 1,
    /**
     * 皮肤
     */
    Skin = 2,
    /**
     * A类型1槽位
     */
    InscriptionA_1 = 10,
    /**
     * A类型2槽位
     */
    InscriptionA_2 = 11,
    /**
     * A类型3槽位
     */
    InscriptionA_3 = 12,
    /**
     * A类型4槽位
     */
    InscriptionA_4 = 13,
    /**
     * A类型5槽位
     */
    InscriptionA_5 = 14,
    /**
     * B类型1槽位
     */
    InscriptionB_1 = 15,
    /**
     * B类型2槽位
     */
    InscriptionB_2 = 16,
    /**
     * B类型3槽位
     */
    InscriptionB_3 = 17,
    /**
     * B类型4槽位
     */
    InscriptionB_4 = 18,
    /**
     * B类型5槽位
     */
    InscriptionB_5 = 19,
    /**
     * C类型1槽位
     */
    InscriptionC_1 = 20,
    /**
     * C类型2槽位
     */
    InscriptionC_2 = 21,
    /**
     * C类型3槽位
     */
    InscriptionC_3 = 22,
    /**
     * C类型4槽位
     */
    InscriptionC_4 = 23,
    /**
     * C类型5槽位
     */
    InscriptionC_5 = 24,
    /**
     * 最大值
     */
    SlotMax = 30,
}
}

export namespace Item {
export class ItemConfig{
    private _dataMap: Map<number, Item.ItemConfigRecord>
    private _dataList: Item.ItemConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Item.ItemConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Item.ItemConfigRecord
            _v = new Item.ItemConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Item.ItemConfigRecord> { return this._dataMap; }
    getDataList(): Item.ItemConfigRecord[] { return this._dataList; }

    get(key: number): Item.ItemConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Item {
export class ItemConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.isVaild === undefined) { GLogHelper.error(1); }
        this.isVaild = _json_.isVaild
        if (_json_.ItemName === undefined) { GLogHelper.error(1); }
        this.ItemName = _json_.ItemName
        if (_json_.ItemIcon === undefined) { GLogHelper.error(1); }
        this.ItemIcon = _json_.ItemIcon
        if (_json_.ItemQuality === undefined) { GLogHelper.error(1); }
        this.ItemQuality = _json_.ItemQuality
        if (_json_.ItemType === undefined) { GLogHelper.error(1); }
        this.ItemType = _json_.ItemType
        if (_json_.ItemDes === undefined) { GLogHelper.error(1); }
        this.ItemDes = _json_.ItemDes
        if (_json_.BagSlotType === undefined) { GLogHelper.error(1); }
        this.BagSlotType = _json_.BagSlotType
        if (_json_.AutoUse === undefined) { GLogHelper.error(1); }
        this.AutoUse = _json_.AutoUse
        if (_json_.OneGameUseLimit === undefined) { GLogHelper.error(1); }
        this.OneGameUseLimit = _json_.OneGameUseLimit
        if (_json_.MaxOwnerCount === undefined) { GLogHelper.error(1); }
        this.MaxOwnerCount = _json_.MaxOwnerCount
        if (_json_.BatchUseable === undefined) { GLogHelper.error(1); }
        this.BatchUseable = _json_.BatchUseable
        if (_json_.BindHeroName === undefined) { GLogHelper.error(1); }
        this.BindHeroName = _json_.BindHeroName
        if (_json_.UseScript === undefined) { GLogHelper.error(1); }
        this.UseScript = _json_.UseScript
        if (_json_.UseArgs === undefined) { GLogHelper.error(1); }
        this.UseArgs = _json_.UseArgs
        if (_json_.AwakeScript === undefined) { GLogHelper.error(1); }
        { this.AwakeScript = []; for(let _ele of _json_.AwakeScript) { let _e : Item.ItemAwakeScriptBean; _e = new Item.ItemAwakeScriptBean(_ele); this.AwakeScript.push(_e);}}
    }

    /**
     * 道具id
     */
    readonly id: number
    /**
     * 是否启用
     */
    readonly isVaild: boolean
    /**
     * 道具名称
     */
    readonly ItemName: string
    /**
     * 道具icon
     */
    readonly ItemIcon: string
    /**
     * 道具品质
     */
    readonly ItemQuality: EEnum.ERarity
    /**
     * 道具类型
     */
    readonly ItemType: EEnum.EItemType
    /**
     * 道具描述
     */
    readonly ItemDes: string
    /**
     * 背包占用格子类型
     */
    readonly BagSlotType: EEnum.EBagSlotType
    /**
     * 获得自动使用
     */
    readonly AutoUse: boolean
    /**
     * 单局使用次数限制
     */
    readonly OneGameUseLimit: number
    /**
     * 最大拥有数量
     */
    readonly MaxOwnerCount: number
    /**
     * 批量使用
     */
    readonly BatchUseable: boolean
    /**
     * 绑定英雄
     */
    readonly BindHeroName: string
    /**
     * 使用脚本
     */
    readonly UseScript: EEnum.EItemUseScript
    /**
     * 使用参数
     */
    readonly UseArgs: number[]
    readonly AwakeScript: Item.ItemAwakeScriptBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.AwakeScript) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Item {
export class ItemAwakeScriptBean {

    constructor(_json_: any) {
        if (_json_.ScriptName === undefined) { GLogHelper.error(1); }
        this.ScriptName = _json_.ScriptName
        if (_json_.ScriptValue === undefined) { GLogHelper.error(1); }
        this.ScriptValue = _json_.ScriptValue
    }

    /**
     * 道具脚本
     */
    readonly ScriptName: EEnum.EItemAwakeScript
    /**
     * 道具脚本参数
     */
    readonly ScriptValue: number[]

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Item {
export class ItemEquipConfig{
    private _dataMap: Map<number, Item.ItemEquipConfigRecord>
    private _dataList: Item.ItemEquipConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Item.ItemEquipConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Item.ItemEquipConfigRecord
            _v = new Item.ItemEquipConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Item.ItemEquipConfigRecord> { return this._dataMap; }
    getDataList(): Item.ItemEquipConfigRecord[] { return this._dataList; }

    get(key: number): Item.ItemEquipConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Item {
export class ItemEquipConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.EquipSlot === undefined) { GLogHelper.error(1); }
        this.EquipSlot = _json_.EquipSlot
        if (_json_.EquipRandomProp === undefined) { GLogHelper.error(1); }
        this.EquipRandomProp = _json_.EquipRandomProp
        if (_json_.SuitId === undefined) { GLogHelper.error(1); }
        this.SuitId = _json_.SuitId
        if (_json_.SuitName === undefined) { GLogHelper.error(1); }
        this.SuitName = _json_.SuitName
        if (_json_.SuitInfo === undefined) { GLogHelper.error(1); }
        { this.SuitInfo = []; for(let _ele of _json_.SuitInfo) { let _e : Item.ItemEquipSuitBean; _e = new Item.ItemEquipSuitBean(_ele); this.SuitInfo.push(_e);}}
    }

    /**
     * 装备id
     */
    readonly id: number
    /**
     * 穿戴部位
     */
    readonly EquipSlot: EEnum.EEquipSolt
    /**
     * 装备随机属性
     */
    readonly EquipRandomProp: number[]
    /**
     * 套装Id
     */
    readonly SuitId: number
    /**
     * 套装名称
     */
    readonly SuitName: string
    readonly SuitInfo: Item.ItemEquipSuitBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.SuitInfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Item {
export class ItemEquipSuitBean {

    constructor(_json_: any) {
        if (_json_.SuitCount === undefined) { GLogHelper.error(1); }
        this.SuitCount = _json_.SuitCount
        if (_json_.SuitBuffs === undefined) { GLogHelper.error(1); }
        this.SuitBuffs = _json_.SuitBuffs
    }

    /**
     * 套装数量
     */
    readonly SuitCount: number
    /**
     * 套装Buff效果
     */
    readonly SuitBuffs: number[]

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Item {
export class ItemBuffConfig{
    private _dataMap: Map<number, Item.ItemBuffConfigRecord>
    private _dataList: Item.ItemBuffConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Item.ItemBuffConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Item.ItemBuffConfigRecord
            _v = new Item.ItemBuffConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Item.ItemBuffConfigRecord> { return this._dataMap; }
    getDataList(): Item.ItemBuffConfigRecord[] { return this._dataList; }

    get(key: number): Item.ItemBuffConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Item {
export class ItemBuffConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.BuffName === undefined) { GLogHelper.error(1); }
        this.BuffName = _json_.BuffName
        if (_json_.BuffValidTime === undefined) { GLogHelper.error(1); }
        this.BuffValidTime = _json_.BuffValidTime
        if (_json_.BuffTargetType === undefined) { GLogHelper.error(1); }
        this.BuffTargetType = _json_.BuffTargetType
        if (_json_.BuffTargetArgs === undefined) { GLogHelper.error(1); }
        this.BuffTargetArgs = _json_.BuffTargetArgs
        if (_json_.BuffQuality === undefined) { GLogHelper.error(1); }
        this.BuffQuality = _json_.BuffQuality
        if (_json_.BuffGroupPriority === undefined) { GLogHelper.error(1); }
        this.BuffGroupPriority = _json_.BuffGroupPriority
        if (_json_.BuffGroupMember === undefined) { GLogHelper.error(1); }
        this.BuffGroupMember = _json_.BuffGroupMember
    }

    /**
     * Buffid
     */
    readonly id: number
    /**
     * Buff名称
     */
    readonly BuffName: string
    /**
     * buff有效时间(秒)
     */
    readonly BuffValidTime: number
    /**
     * 目标类型
     */
    readonly BuffTargetType: string
    /**
     * 目标类型参数
     */
    readonly BuffTargetArgs: number[]
    /**
     * Buff品质
     */
    readonly BuffQuality: number
    /**
     * Buff组内优先级
     */
    readonly BuffGroupPriority: number
    /**
     * 同组Buff成员
     */
    readonly BuffGroupMember: number[]

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Item {
export class ItemPrizePoolConfig{
    private _dataMap: Map<number, Item.ItemPrizePoolConfigRecord>
    private _dataList: Item.ItemPrizePoolConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Item.ItemPrizePoolConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Item.ItemPrizePoolConfigRecord
            _v = new Item.ItemPrizePoolConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Item.ItemPrizePoolConfigRecord> { return this._dataMap; }
    getDataList(): Item.ItemPrizePoolConfigRecord[] { return this._dataList; }

    get(key: number): Item.ItemPrizePoolConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Item {
export class ItemPrizePoolConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.itempool === undefined) { GLogHelper.error(1); }
        { this.itempool = []; for(let _ele of _json_.itempool) { let _e : Item.ItemPrizePoolBean; _e = new Item.ItemPrizePoolBean(_ele); this.itempool.push(_e);}}
    }

    /**
     * 池子id
     */
    readonly id: number
    readonly itempool: Item.ItemPrizePoolBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.itempool) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Item {
export class ItemPrizePoolBean {

    constructor(_json_: any) {
        if (_json_.ItemConfigId === undefined) { GLogHelper.error(1); }
        this.ItemConfigId = _json_.ItemConfigId
        if (_json_.ItemName === undefined) { GLogHelper.error(1); }
        this.ItemName = _json_.ItemName
        if (_json_.ItemCount === undefined) { GLogHelper.error(1); }
        this.ItemCount = _json_.ItemCount
        if (_json_.ItemWeight === undefined) { GLogHelper.error(1); }
        this.ItemWeight = _json_.ItemWeight
        if (_json_.IsVaild === undefined) { GLogHelper.error(1); }
        this.IsVaild = _json_.IsVaild
    }

    /**
     * 道具索引
     */
    readonly ItemConfigId: number
    /**
     * 道具名称
     */
    readonly ItemName: string
    /**
     * 道具数量
     */
    readonly ItemCount: number
    /**
     * 道具权重
     */
    readonly ItemWeight: number
    /**
     * 是否启用
     */
    readonly IsVaild: boolean

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Item {
export class ItemPrizePoolGroupConfig{
    private _dataMap: Map<number, Item.ItemPrizePoolGroupConfigRecord>
    private _dataList: Item.ItemPrizePoolGroupConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Item.ItemPrizePoolGroupConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Item.ItemPrizePoolGroupConfigRecord
            _v = new Item.ItemPrizePoolGroupConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Item.ItemPrizePoolGroupConfigRecord> { return this._dataMap; }
    getDataList(): Item.ItemPrizePoolGroupConfigRecord[] { return this._dataList; }

    get(key: number): Item.ItemPrizePoolGroupConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Item {
export class ItemPrizePoolGroupConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.IsRandomRepeat === undefined) { GLogHelper.error(1); }
        this.IsRandomRepeat = _json_.IsRandomRepeat
        if (_json_.RandomCountInfo === undefined) { GLogHelper.error(1); }
        { this.RandomCountInfo = []; for(let _ele of _json_.RandomCountInfo) { let _e : Item.ItemRandomCountBean; _e = new Item.ItemRandomCountBean(_ele); this.RandomCountInfo.push(_e);}}
        if (_json_.ItemPoolGroup === undefined) { GLogHelper.error(1); }
        { this.ItemPoolGroup = []; for(let _ele of _json_.ItemPoolGroup) { let _e : Item.ItemPoolGroupBean; _e = new Item.ItemPoolGroupBean(_ele); this.ItemPoolGroup.push(_e);}}
    }

    /**
     * 池子组id
     */
    readonly id: number
    /**
     * 随机奖励是否重复
     */
    readonly IsRandomRepeat: number
    readonly RandomCountInfo: Item.ItemRandomCountBean[]
    readonly ItemPoolGroup: Item.ItemPoolGroupBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.RandomCountInfo) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.ItemPoolGroup) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Item {
export class ItemRandomCountBean {

    constructor(_json_: any) {
        if (_json_.RandomCount === undefined) { GLogHelper.error(1); }
        this.RandomCount = _json_.RandomCount
        if (_json_.RandomWeight === undefined) { GLogHelper.error(1); }
        this.RandomWeight = _json_.RandomWeight
    }

    /**
     * 随机数量
     */
    readonly RandomCount: number
    /**
     * 随机权重
     */
    readonly RandomWeight: number

    resolve(_tables: Map<string, any>) {
    }
}

}



export namespace Item {
export class ItemPoolGroupBean {

    constructor(_json_: any) {
        if (_json_.ItemPoolConfigId === undefined) { GLogHelper.error(1); }
        this.ItemPoolConfigId = _json_.ItemPoolConfigId
        if (_json_.ItemPoolWeight === undefined) { GLogHelper.error(1); }
        this.ItemPoolWeight = _json_.ItemPoolWeight
    }

    /**
     * 池子索引
     */
    readonly ItemPoolConfigId: number
    /**
     * 池子权重
     */
    readonly ItemPoolWeight: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Shop {
export class ShopConfig{
    private _dataMap: Map<number, Shop.ShopConfigRecord>
    private _dataList: Shop.ShopConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Shop.ShopConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Shop.ShopConfigRecord
            _v = new Shop.ShopConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Shop.ShopConfigRecord> { return this._dataMap; }
    getDataList(): Shop.ShopConfigRecord[] { return this._dataList; }

    get(key: number): Shop.ShopConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Shop {
export class ShopConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.isVaild === undefined) { GLogHelper.error(1); }
        this.isVaild = _json_.isVaild
        if (_json_.ShopType === undefined) { GLogHelper.error(1); }
        this.ShopType = _json_.ShopType
        if (_json_.ShopName === undefined) { GLogHelper.error(1); }
        this.ShopName = _json_.ShopName
        if (_json_.ShopRefreshType === undefined) { GLogHelper.error(1); }
        this.ShopRefreshType = _json_.ShopRefreshType
        if (_json_.ShopStartTime === undefined) { GLogHelper.error(1); }
        this.ShopStartTime = _json_.ShopStartTime
        if (_json_.ShopValidTime === undefined) { GLogHelper.error(1); }
        this.ShopValidTime = _json_.ShopValidTime
        if (_json_.sellinfo === undefined) { GLogHelper.error(1); }
        { this.sellinfo = []; for(let _ele of _json_.sellinfo) { let _e : Shop.ShopSellItemBean; _e = new Shop.ShopSellItemBean(_ele); this.sellinfo.push(_e);}}
    }

    /**
     * 池子id
     */
    readonly id: number
    /**
     * 是否启用
     */
    readonly isVaild: boolean
    /**
     * 商店类型
     */
    readonly ShopType: number
    /**
     * 商店名称
     */
    readonly ShopName: string
    /**
     * 商店刷新类型
     */
    readonly ShopRefreshType: number
    /**
     * 商店开启时间
     */
    readonly ShopStartTime: number
    /**
     * 商店有效时间
     */
    readonly ShopValidTime: number
    readonly sellinfo: Shop.ShopSellItemBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.sellinfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Shop {
export class ShopSellItemBean {

    constructor(_json_: any) {
        if (_json_.SellConfigid === undefined) { GLogHelper.error(1); }
        this.SellConfigid = _json_.SellConfigid
        if (_json_.Selllabel === undefined) { GLogHelper.error(1); }
        this.Selllabel = _json_.Selllabel
        if (_json_.SellCount === undefined) { GLogHelper.error(1); }
        this.SellCount = _json_.SellCount
        if (_json_.SellRefreshType === undefined) { GLogHelper.error(1); }
        this.SellRefreshType = _json_.SellRefreshType
        if (_json_.SellStartTime === undefined) { GLogHelper.error(1); }
        this.SellStartTime = _json_.SellStartTime
        if (_json_.SellValidTime === undefined) { GLogHelper.error(1); }
        this.SellValidTime = _json_.SellValidTime
        if (_json_.ItemConfigId === undefined) { GLogHelper.error(1); }
        this.ItemConfigId = _json_.ItemConfigId
        if (_json_.ItemName === undefined) { GLogHelper.error(1); }
        this.ItemName = _json_.ItemName
        if (_json_.ItemCount === undefined) { GLogHelper.error(1); }
        this.ItemCount = _json_.ItemCount
        if (_json_.CostType === undefined) { GLogHelper.error(1); }
        this.CostType = _json_.CostType
        if (_json_.OriginPrice === undefined) { GLogHelper.error(1); }
        this.OriginPrice = _json_.OriginPrice
        if (_json_.RealPrice === undefined) { GLogHelper.error(1); }
        this.RealPrice = _json_.RealPrice
        if (_json_.OverSeaOriginPrice === undefined) { GLogHelper.error(1); }
        this.OverSeaOriginPrice = _json_.OverSeaOriginPrice
        if (_json_.OverSeaRealPrice === undefined) { GLogHelper.error(1); }
        this.OverSeaRealPrice = _json_.OverSeaRealPrice
        if (_json_.Discount === undefined) { GLogHelper.error(1); }
        this.Discount = _json_.Discount
        if (_json_.VipLimit === undefined) { GLogHelper.error(1); }
        this.VipLimit = _json_.VipLimit
        if (_json_.IsVaild === undefined) { GLogHelper.error(1); }
        this.IsVaild = _json_.IsVaild
    }

    /**
     * 售卖索引
     */
    readonly SellConfigid: number
    /**
     * 售卖标签
     */
    readonly Selllabel: string
    /**
     * 售卖数量
     */
    readonly SellCount: number
    /**
     * 商品刷新类型
     */
    readonly SellRefreshType: EEnum.ESellRefreshType
    /**
     * 商品开启时间
     */
    readonly SellStartTime: number
    /**
     * 商品有效时间
     */
    readonly SellValidTime: number
    /**
     * 道具索引
     */
    readonly ItemConfigId: number
    /**
     * 道具名称
     */
    readonly ItemName: string
    /**
     * 道具数量
     */
    readonly ItemCount: number
    /**
     * 货币类型
     */
    readonly CostType: EEnum.EMoneyType
    /**
     * 初始价格
     */
    readonly OriginPrice: number
    /**
     * 最终价格
     */
    readonly RealPrice: number
    /**
     * 海外初始价格
     */
    readonly OverSeaOriginPrice: number
    /**
     * 海外最终价格
     */
    readonly OverSeaRealPrice: number
    /**
     * 折扣
     */
    readonly Discount: number
    /**
     * Vip限制
     */
    readonly VipLimit: boolean
    /**
     * 是否启用
     */
    readonly IsVaild: boolean

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Season {
export class SeasonConfig{
    private _dataMap: Map<number, Season.SeasonConfigRecord>
    private _dataList: Season.SeasonConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Season.SeasonConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Season.SeasonConfigRecord
            _v = new Season.SeasonConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Season.SeasonConfigRecord> { return this._dataMap; }
    getDataList(): Season.SeasonConfigRecord[] { return this._dataList; }

    get(key: number): Season.SeasonConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Season {
export class SeasonConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.SeasonName === undefined) { GLogHelper.error(1); }
        this.SeasonName = _json_.SeasonName
        if (_json_.SeasonStartTime === undefined) { GLogHelper.error(1); }
        this.SeasonStartTime = _json_.SeasonStartTime
        if (_json_.SeasonEndTime === undefined) { GLogHelper.error(1); }
        this.SeasonEndTime = _json_.SeasonEndTime
    }

    /**
     * 赛季id
     */
    readonly id: number
    /**
     * 赛季名称
     */
    readonly SeasonName: string
    /**
     * 赛季开始时间
     */
    readonly SeasonStartTime: number
    /**
     * 赛季结束时间
     */
    readonly SeasonEndTime: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Rank {
export class RankPrizeConfig{
    private _dataMap: Map<number, Rank.RankPrizeConfigRecord>
    private _dataList: Rank.RankPrizeConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Rank.RankPrizeConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Rank.RankPrizeConfigRecord
            _v = new Rank.RankPrizeConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Rank.RankPrizeConfigRecord> { return this._dataMap; }
    getDataList(): Rank.RankPrizeConfigRecord[] { return this._dataList; }

    get(key: number): Rank.RankPrizeConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Rank {
export class RankPrizeConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.SeasonPrizeItemGroup === undefined) { GLogHelper.error(1); }
        { this.SeasonPrizeItemGroup = []; for(let _ele of _json_.SeasonPrizeItemGroup) { let _e : Item.ItemGroupBean; _e = new Item.ItemGroupBean(_ele); this.SeasonPrizeItemGroup.push(_e);}}
        if (_json_.DailyPrizeItemGroup === undefined) { GLogHelper.error(1); }
        { this.DailyPrizeItemGroup = []; for(let _ele of _json_.DailyPrizeItemGroup) { let _e : Item.ItemGroupBean; _e = new Item.ItemGroupBean(_ele); this.DailyPrizeItemGroup.push(_e);}}
    }

    /**
     * 排行id
     */
    readonly id: number
    readonly SeasonPrizeItemGroup: Item.ItemGroupBean[]
    readonly DailyPrizeItemGroup: Item.ItemGroupBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.SeasonPrizeItemGroup) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.DailyPrizeItemGroup) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Item {
export class ItemGroupBean {

    constructor(_json_: any) {
        if (_json_.Index === undefined) { GLogHelper.error(1); }
        this.Index = _json_.Index
        if (_json_.ItemGroup === undefined) { GLogHelper.error(1); }
        { this.ItemGroup = []; for(let _ele of _json_.ItemGroup) { let _e : Item.ItemInfoBean; _e = new Item.ItemInfoBean(_ele); this.ItemGroup.push(_e);}}
    }

    /**
     * 道具组索引
     */
    readonly Index: number
    /**
     * 道具组
     */
    readonly ItemGroup: Item.ItemInfoBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.ItemGroup) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Item {
export class ItemInfoBean {

    constructor(_json_: any) {
        if (_json_.ItemConfigId === undefined) { GLogHelper.error(1); }
        this.ItemConfigId = _json_.ItemConfigId
        if (_json_.ItemCount === undefined) { GLogHelper.error(1); }
        this.ItemCount = _json_.ItemCount
    }

    /**
     * 道具索引
     */
    readonly ItemConfigId: number
    /**
     * 道具数量
     */
    readonly ItemCount: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Draw {
export class DrawTreasureConfig{
    private _dataMap: Map<number, Draw.DrawTreasureConfigRecord>
    private _dataList: Draw.DrawTreasureConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Draw.DrawTreasureConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Draw.DrawTreasureConfigRecord
            _v = new Draw.DrawTreasureConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Draw.DrawTreasureConfigRecord> { return this._dataMap; }
    getDataList(): Draw.DrawTreasureConfigRecord[] { return this._dataList; }

    get(key: number): Draw.DrawTreasureConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Draw {
export class DrawTreasureConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.CostType === undefined) { GLogHelper.error(1); }
        this.CostType = _json_.CostType
        if (_json_.RealPrice === undefined) { GLogHelper.error(1); }
        this.RealPrice = _json_.RealPrice
        if (_json_.FreeInterval === undefined) { GLogHelper.error(1); }
        this.FreeInterval = _json_.FreeInterval
        if (_json_.SpePrizeTimes === undefined) { GLogHelper.error(1); }
        this.SpePrizeTimes = _json_.SpePrizeTimes
        if (_json_.ComItemPoolGroup === undefined) { GLogHelper.error(1); }
        this.ComItemPoolGroup = _json_.ComItemPoolGroup
        if (_json_.SpeItemPoolGroup === undefined) { GLogHelper.error(1); }
        this.SpeItemPoolGroup = _json_.SpeItemPoolGroup
    }

    /**
     * 宝箱id
     */
    readonly id: number
    /**
     * 货币类型
     */
    readonly CostType: number
    /**
     * 货币数量
     */
    readonly RealPrice: number
    /**
     * 免费时间间隔(s)
     */
    readonly FreeInterval: number
    /**
     * 干涉次数
     */
    readonly SpePrizeTimes: number
    /**
     * 普通奖池组
     */
    readonly ComItemPoolGroup: number
    /**
     * 特殊奖池组
     */
    readonly SpeItemPoolGroup: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Achievement {
export class AchievementConfig{
    private _dataMap: Map<number, Achievement.AchievementConfigRecord>
    private _dataList: Achievement.AchievementConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Achievement.AchievementConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Achievement.AchievementConfigRecord
            _v = new Achievement.AchievementConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Achievement.AchievementConfigRecord> { return this._dataMap; }
    getDataList(): Achievement.AchievementConfigRecord[] { return this._dataList; }

    get(key: number): Achievement.AchievementConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Achievement {
export class AchievementConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.Index === undefined) { GLogHelper.error(1); }
        this.Index = _json_.Index
        if (_json_.NextId === undefined) { GLogHelper.error(1); }
        this.NextId = _json_.NextId
        if (_json_.AchievementName === undefined) { GLogHelper.error(1); }
        this.AchievementName = _json_.AchievementName
        if (_json_.AchievementDes === undefined) { GLogHelper.error(1); }
        this.AchievementDes = _json_.AchievementDes
        if (_json_.AchievementType === undefined) { GLogHelper.error(1); }
        this.AchievementType = _json_.AchievementType
        if (_json_.AchievementFinishType === undefined) { GLogHelper.error(1); }
        this.AchievementFinishType = _json_.AchievementFinishType
        if (_json_.AchieveFinishCondition === undefined) { GLogHelper.error(1); }
        { this.AchieveFinishCondition = []; for(let _ele of _json_.AchieveFinishCondition) { let _e : Task.TaskFinishConditionBean; _e = new Task.TaskFinishConditionBean(_ele); this.AchieveFinishCondition.push(_e);}}
        if (_json_.AchievePrize === undefined) { GLogHelper.error(1); }
        { this.AchievePrize = []; for(let _ele of _json_.AchievePrize) { let _e : Item.ItemInfoBean; _e = new Item.ItemInfoBean(_ele); this.AchievePrize.push(_e);}}
    }

    /**
     * 成就id
     */
    readonly id: number
    /**
     * 组内索引
     */
    readonly Index: number
    /**
     * 组内下一个成就id
     */
    readonly NextId: number
    /**
     * 成就名称
     */
    readonly AchievementName: string
    /**
     * 成就描述
     */
    readonly AchievementDes: string
    /**
     * 成就类型
     */
    readonly AchievementType: string
    /**
     * 成就完成类型
     */
    readonly AchievementFinishType: string
    readonly AchieveFinishCondition: Task.TaskFinishConditionBean[]
    readonly AchievePrize: Item.ItemInfoBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.AchieveFinishCondition) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.AchievePrize) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Task {
export class TaskFinishConditionBean {

    constructor(_json_: any) {
        if (_json_.KeyString === undefined) { GLogHelper.error(1); }
        this.KeyString = _json_.KeyString
        if (_json_.ValueInt === undefined) { GLogHelper.error(1); }
        this.ValueInt = _json_.ValueInt
    }

    /**
     * 条件Key
     */
    readonly KeyString: string
    /**
     * 条件Value
     */
    readonly ValueInt: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Title {
export class TitleConfig{
    private _dataMap: Map<number, Title.TitleConfigRecord>
    private _dataList: Title.TitleConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Title.TitleConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Title.TitleConfigRecord
            _v = new Title.TitleConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Title.TitleConfigRecord> { return this._dataMap; }
    getDataList(): Title.TitleConfigRecord[] { return this._dataList; }

    get(key: number): Title.TitleConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Title {
export class TitleConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.TitleName === undefined) { GLogHelper.error(1); }
        this.TitleName = _json_.TitleName
        if (_json_.TitleType === undefined) { GLogHelper.error(1); }
        this.TitleType = _json_.TitleType
        if (_json_.TitleValidTime === undefined) { GLogHelper.error(1); }
        this.TitleValidTime = _json_.TitleValidTime
        if (_json_.TitleBuffs === undefined) { GLogHelper.error(1); }
        this.TitleBuffs = _json_.TitleBuffs
    }

    /**
     * 称号Id
     */
    readonly id: number
    /**
     * 称号名称
     */
    readonly TitleName: string
    /**
     * 称号类型
     */
    readonly TitleType: number
    /**
     * 称号有效时间
     */
    readonly TitleValidTime: number
    /**
     * 称号Buff
     */
    readonly TitleBuffs: number[]

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Glob {
export class GlobalSetting{

     private _data: Glob.GlobalSettingRecord
    constructor(_json_: any[]) {
 if (_json_.length  != 1) throw new Error('table mode=one, but size != 1')
        this._data = new Glob.GlobalSettingRecord(_json_[0])
    }

    getData(): Glob.GlobalSettingRecord { return this._data; }

    /**
     * desc1
     */
     get  guildOpenLevel(): number { return this._data.guildOpenLevel; }
    /**
     * desc2
     */
     get  bagInitCapacity(): number { return this._data.bagInitCapacity; }
    /**
     * desc3
     */
     get  bagMaxCapacity(): number { return this._data.bagMaxCapacity; }
    /**
     * desc4
     */
     get  newbieTasks(): number[] { return this._data.newbieTasks; }

    resolve(_tables: Map<string, any>) {
        this._data.resolve(_tables)
    }

    
}
}



export namespace Glob {
export class GlobalSettingRecord {

    constructor(_json_: any) {
        if (_json_.guild_open_level === undefined) { GLogHelper.error(1); }
        this.guildOpenLevel = _json_.guild_open_level
        if (_json_.bag_init_capacity === undefined) { GLogHelper.error(1); }
        this.bagInitCapacity = _json_.bag_init_capacity
        if (_json_.bag_max_capacity === undefined) { GLogHelper.error(1); }
        this.bagMaxCapacity = _json_.bag_max_capacity
        if (_json_.newbie_tasks === undefined) { GLogHelper.error(1); }
        this.newbieTasks = _json_.newbie_tasks
    }

    /**
     * desc1
     */
    readonly guildOpenLevel: number
    /**
     * desc2
     */
    readonly bagInitCapacity: number
    /**
     * desc3
     */
    readonly bagMaxCapacity: number
    /**
     * desc4
     */
    readonly newbieTasks: number[]

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class BuildingLevelUpConfig{
    private _dataMap: Map<string, Dota.BuildingLevelUpConfigRecord>
    private _dataList: Dota.BuildingLevelUpConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.BuildingLevelUpConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.BuildingLevelUpConfigRecord
            _v = new Dota.BuildingLevelUpConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.Id, _v)
        }
    }

    getDataMap(): Map<string, Dota.BuildingLevelUpConfigRecord> { return this._dataMap; }
    getDataList(): Dota.BuildingLevelUpConfigRecord[] { return this._dataList; }

    get(key: string): Dota.BuildingLevelUpConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class BuildingLevelUpConfigRecord {

    constructor(_json_: any) {
        if (_json_.Id === undefined) { GLogHelper.error(1); }
        this.Id = _json_.Id
        if (_json_.IsValid === undefined) { GLogHelper.error(1); }
        this.IsValid = _json_.IsValid
        if (_json_.BattleScore === undefined) { GLogHelper.error(1); }
        this.BattleScore = _json_.BattleScore
        if (_json_.Bundles === undefined) { GLogHelper.error(1); }
        this.Bundles = _json_.Bundles
        if (_json_.StarUpInfo === undefined) { GLogHelper.error(1); }
        { this.StarUpInfo = []; for(let _ele of _json_.StarUpInfo) { let _e : Dota.UnitStarUpConfigBean; _e = new Dota.UnitStarUpConfigBean(_ele); this.StarUpInfo.push(_e);}}
        if (_json_.TalentInfo === undefined) { GLogHelper.error(1); }
        { this.TalentInfo = []; for(let _ele of _json_.TalentInfo) { let _e : Dota.UnitTalentInfoBean; _e = new Dota.UnitTalentInfoBean(_ele); this.TalentInfo.push(_e);}}
    }

    /**
     * 主键
     */
    readonly Id: string
    /**
     * 是否启用
     */
    readonly IsValid: boolean
    /**
     * 初始战力
     */
    readonly BattleScore: number
    /**
     * 套装
     */
    readonly Bundles: number[]
    readonly StarUpInfo: Dota.UnitStarUpConfigBean[]
    readonly TalentInfo: Dota.UnitTalentInfoBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.StarUpInfo) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.TalentInfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class UnitStarUpConfigBean {

    constructor(_json_: any) {
        if (_json_.Star === undefined) { GLogHelper.error(1); }
        this.Star = _json_.Star
        if (_json_.AttributeBaseStrength === undefined) { GLogHelper.error(1); }
        this.AttributeBaseStrength = _json_.AttributeBaseStrength
        if (_json_.AttributeBaseAgility === undefined) { GLogHelper.error(1); }
        this.AttributeBaseAgility = _json_.AttributeBaseAgility
        if (_json_.AttributeBaseIntelligence === undefined) { GLogHelper.error(1); }
        this.AttributeBaseIntelligence = _json_.AttributeBaseIntelligence
        if (_json_.AttachWearables === undefined) { GLogHelper.error(1); }
        this.AttachWearables = _json_.AttachWearables
    }

    /**
     * 星级
     */
    readonly Star: number
    /**
     * 基础力量
     */
    readonly AttributeBaseStrength: number
    /**
     * 基础敏捷
     */
    readonly AttributeBaseAgility: number
    /**
     * 基础智力
     */
    readonly AttributeBaseIntelligence: number
    /**
     * 饰品
     */
    readonly AttachWearables: string[]

    resolve(_tables: Map<string, any>) {
    }
}

}



export namespace Dota {
export class UnitTalentInfoBean {

    constructor(_json_: any) {
        if (_json_.TalentLevel === undefined) { GLogHelper.error(1); }
        this.TalentLevel = _json_.TalentLevel
        if (_json_.TalentLeft === undefined) { GLogHelper.error(1); }
        this.TalentLeft = _json_.TalentLeft
        if (_json_.TalentRight === undefined) { GLogHelper.error(1); }
        this.TalentRight = _json_.TalentRight
    }

    /**
     * 天赋组索引
     */
    readonly TalentLevel: number
    /**
     * 左侧天赋
     */
    readonly TalentLeft: string
    /**
     * 右侧天赋
     */
    readonly TalentRight: string

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class BuildingLevelUpExpConfig{
    private _dataMap: Map<number, Dota.BuildingLevelUpExpConfigRecord>
    private _dataList: Dota.BuildingLevelUpExpConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Dota.BuildingLevelUpExpConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.BuildingLevelUpExpConfigRecord
            _v = new Dota.BuildingLevelUpExpConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Dota.BuildingLevelUpExpConfigRecord> { return this._dataMap; }
    getDataList(): Dota.BuildingLevelUpExpConfigRecord[] { return this._dataList; }

    get(key: number): Dota.BuildingLevelUpExpConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class BuildingLevelUpExpConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.Exp === undefined) { GLogHelper.error(1); }
        this.Exp = _json_.Exp
        if (_json_.TotalTalentPoint === undefined) { GLogHelper.error(1); }
        this.TotalTalentPoint = _json_.TotalTalentPoint
    }

    /**
     * 等级
     */
    readonly id: number
    /**
     * 所需经验
     */
    readonly Exp: number
    /**
     * 天赋总点数
     */
    readonly TotalTalentPoint: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class PropConfig{
    private _dataMap: Map<number, Dota.PropConfigRecord>
    private _dataList: Dota.PropConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Dota.PropConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.PropConfigRecord
            _v = new Dota.PropConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Dota.PropConfigRecord> { return this._dataMap; }
    getDataList(): Dota.PropConfigRecord[] { return this._dataList; }

    get(key: number): Dota.PropConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class PropConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.PropName === undefined) { GLogHelper.error(1); }
        this.PropName = _json_.PropName
        if (_json_.Des === undefined) { GLogHelper.error(1); }
        this.Des = _json_.Des
    }

    /**
     * 主键
     */
    readonly id: number
    /**
     * 属性名称
     */
    readonly PropName: string
    /**
     * 属性描述
     */
    readonly Des: string

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class PropRandomConfig{
    private _dataMap: Map<number, Dota.PropRandomConfigRecord>
    private _dataList: Dota.PropRandomConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Dota.PropRandomConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.PropRandomConfigRecord
            _v = new Dota.PropRandomConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Dota.PropRandomConfigRecord> { return this._dataMap; }
    getDataList(): Dota.PropRandomConfigRecord[] { return this._dataList; }

    get(key: number): Dota.PropRandomConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class PropRandomConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.propPool === undefined) { GLogHelper.error(1); }
        { this.propPool = []; for(let _ele of _json_.propPool) { let _e : Dota.PropPoolBean; _e = new Dota.PropPoolBean(_ele); this.propPool.push(_e);}}
    }

    /**
     * 随机属性id
     */
    readonly id: number
    readonly propPool: Dota.PropPoolBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.propPool) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class PropPoolBean {

    constructor(_json_: any) {
        if (_json_.Propid === undefined) { GLogHelper.error(1); }
        this.Propid = _json_.Propid
        if (_json_.PropDes === undefined) { GLogHelper.error(1); }
        this.PropDes = _json_.PropDes
        if (_json_.PropWeight === undefined) { GLogHelper.error(1); }
        this.PropWeight = _json_.PropWeight
        if (_json_.PropMax === undefined) { GLogHelper.error(1); }
        this.PropMax = _json_.PropMax
        if (_json_.PropMin === undefined) { GLogHelper.error(1); }
        this.PropMin = _json_.PropMin
    }

    /**
     * 属性id
     */
    readonly Propid: number
    /**
     * 属性描述
     */
    readonly PropDes: string
    /**
     * 属性权重
     */
    readonly PropWeight: number
    /**
     * 属性显示最大值
     */
    readonly PropMax: number
    /**
     * 属性显示最小值
     */
    readonly PropMin: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class BattlePassChargeConfig{
    private _dataMap: Map<number, Dota.BattlePassChargeConfigRecord>
    private _dataList: Dota.BattlePassChargeConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Dota.BattlePassChargeConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.BattlePassChargeConfigRecord
            _v = new Dota.BattlePassChargeConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Dota.BattlePassChargeConfigRecord> { return this._dataMap; }
    getDataList(): Dota.BattlePassChargeConfigRecord[] { return this._dataList; }

    get(key: number): Dota.BattlePassChargeConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class BattlePassChargeConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.SeasonId === undefined) { GLogHelper.error(1); }
        this.SeasonId = _json_.SeasonId
        if (_json_.IsCourier === undefined) { GLogHelper.error(1); }
        this.IsCourier = _json_.IsCourier
        if (_json_.ChargeTo === undefined) { GLogHelper.error(1); }
        this.ChargeTo = new Item.ItemInfoBean(_json_.ChargeTo)
        if (_json_.ChargeBy === undefined) { GLogHelper.error(1); }
        this.ChargeBy = new Item.ItemInfoBean(_json_.ChargeBy)
    }

    /**
     * 唯一id
     */
    readonly id: number
    /**
     * 赛季ID
     */
    readonly SeasonId: number
    /**
     * 是否是信使
     */
    readonly IsCourier: boolean
    readonly ChargeTo: Item.ItemInfoBean
    readonly ChargeBy: Item.ItemInfoBean

    resolve(_tables: Map<string, any>) {
        if (this.ChargeTo != null) { this.ChargeTo.resolve(_tables);}
        if (this.ChargeBy != null) { this.ChargeBy.resolve(_tables);}
    }
}

}

export namespace Dota {
export class BattlePassTaskConfig{
    private _dataMap: Map<number, Dota.BattlePassTaskConfigRecord>
    private _dataList: Dota.BattlePassTaskConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Dota.BattlePassTaskConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.BattlePassTaskConfigRecord
            _v = new Dota.BattlePassTaskConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Dota.BattlePassTaskConfigRecord> { return this._dataMap; }
    getDataList(): Dota.BattlePassTaskConfigRecord[] { return this._dataList; }

    get(key: number): Dota.BattlePassTaskConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class BattlePassTaskConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.TaskName === undefined) { GLogHelper.error(1); }
        this.TaskName = _json_.TaskName
        if (_json_.TaskDes === undefined) { GLogHelper.error(1); }
        this.TaskDes = _json_.TaskDes
        if (_json_.TaskType === undefined) { GLogHelper.error(1); }
        this.TaskType = _json_.TaskType
        if (_json_.BindHero === undefined) { GLogHelper.error(1); }
        this.BindHero = _json_.BindHero
        if (_json_.TaskFinishCondition === undefined) { GLogHelper.error(1); }
        this.TaskFinishCondition = new Task.TaskFinishConditionBean(_json_.TaskFinishCondition)
        if (_json_.TaskPrize === undefined) { GLogHelper.error(1); }
        this.TaskPrize = new Item.ItemInfoBean(_json_.TaskPrize)
    }

    /**
     * 任务id
     */
    readonly id: number
    /**
     * 任务名称
     */
    readonly TaskName: string
    /**
     * 任务描述
     */
    readonly TaskDes: string
    /**
     * 任务类型
     */
    readonly TaskType: string
    /**
     * 绑定的英雄
     */
    readonly BindHero: string
    readonly TaskFinishCondition: Task.TaskFinishConditionBean
    readonly TaskPrize: Item.ItemInfoBean

    resolve(_tables: Map<string, any>) {
        if (this.TaskFinishCondition != null) { this.TaskFinishCondition.resolve(_tables);}
        if (this.TaskPrize != null) { this.TaskPrize.resolve(_tables);}
    }
}

}

export namespace Dota {
export class BattlePassLevelUpConfig{
    private _dataMap: Map<number, Dota.BattlePassLevelUpConfigRecord>
    private _dataList: Dota.BattlePassLevelUpConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Dota.BattlePassLevelUpConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.BattlePassLevelUpConfigRecord
            _v = new Dota.BattlePassLevelUpConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Dota.BattlePassLevelUpConfigRecord> { return this._dataMap; }
    getDataList(): Dota.BattlePassLevelUpConfigRecord[] { return this._dataList; }

    get(key: number): Dota.BattlePassLevelUpConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class BattlePassLevelUpConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.BattlePassLevel === undefined) { GLogHelper.error(1); }
        this.BattlePassLevel = _json_.BattlePassLevel
        if (_json_.SeasonId === undefined) { GLogHelper.error(1); }
        this.SeasonId = _json_.SeasonId
        if (_json_.LevelUpExp === undefined) { GLogHelper.error(1); }
        this.LevelUpExp = _json_.LevelUpExp
        if (_json_.TaskComPrize === undefined) { GLogHelper.error(1); }
        this.TaskComPrize = new Item.ItemInfoBean(_json_.TaskComPrize)
        if (_json_.TaskSpePrize === undefined) { GLogHelper.error(1); }
        this.TaskSpePrize = new Item.ItemInfoBean(_json_.TaskSpePrize)
    }

    /**
     * 唯一id
     */
    readonly id: number
    /**
     * BattlePass等级
     */
    readonly BattlePassLevel: number
    /**
     * 赛季ID
     */
    readonly SeasonId: number
    /**
     * 升级所需经验
     */
    readonly LevelUpExp: number
    readonly TaskComPrize: Item.ItemInfoBean
    readonly TaskSpePrize: Item.ItemInfoBean

    resolve(_tables: Map<string, any>) {
        if (this.TaskComPrize != null) { this.TaskComPrize.resolve(_tables);}
        if (this.TaskSpePrize != null) { this.TaskSpePrize.resolve(_tables);}
    }
}

}

export namespace Dota {
export class InfoPassLevelUpConfig{
    private _dataMap: Map<number, Dota.InfoPassLevelUpConfigRecord>
    private _dataList: Dota.InfoPassLevelUpConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<number, Dota.InfoPassLevelUpConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.InfoPassLevelUpConfigRecord
            _v = new Dota.InfoPassLevelUpConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, Dota.InfoPassLevelUpConfigRecord> { return this._dataMap; }
    getDataList(): Dota.InfoPassLevelUpConfigRecord[] { return this._dataList; }

    get(key: number): Dota.InfoPassLevelUpConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class InfoPassLevelUpConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.TaskComPrize === undefined) { GLogHelper.error(1); }
        this.TaskComPrize = new Item.ItemInfoBean(_json_.TaskComPrize)
    }

    /**
     * 唯一id
     */
    readonly id: number
    readonly TaskComPrize: Item.ItemInfoBean

    resolve(_tables: Map<string, any>) {
        if (this.TaskComPrize != null) { this.TaskComPrize.resolve(_tables);}
    }
}

}

export namespace Dota {
export class BuffEffectConfig{
    private _dataMap: Map<string, Dota.BuffEffectConfigRecord>
    private _dataList: Dota.BuffEffectConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.BuffEffectConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.BuffEffectConfigRecord
            _v = new Dota.BuffEffectConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.effectid, _v)
        }
    }

    getDataMap(): Map<string, Dota.BuffEffectConfigRecord> { return this._dataMap; }
    getDataList(): Dota.BuffEffectConfigRecord[] { return this._dataList; }

    get(key: string): Dota.BuffEffectConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class BuffEffectConfigRecord {

    constructor(_json_: any) {
        if (_json_.effectid === undefined) { GLogHelper.error(1); }
        this.effectid = _json_.effectid
        if (_json_.target === undefined) { GLogHelper.error(1); }
        this.target = _json_.target
        if (_json_.propinfo === undefined) { GLogHelper.error(1); }
        this.propinfo = new Map<string, number>(); for(let _entry_ of _json_.propinfo as any[][]) { let _k:string; _k = _entry_[0];  let _v:number;  _v = _entry_[1]; this.propinfo.set(_k, _v);  }
    }

    /**
     * 效果id
     */
    readonly effectid: string
    /**
     * 对象
     */
    readonly target: string
    /**
     * 属性相关
     */
    readonly propinfo: Map<string, number>

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class CourierAbilityLevelUpConfig{
    private _dataMap: Map<string, Dota.CourierAbilityLevelUpConfigRecord>
    private _dataList: Dota.CourierAbilityLevelUpConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.CourierAbilityLevelUpConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.CourierAbilityLevelUpConfigRecord
            _v = new Dota.CourierAbilityLevelUpConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.LevelId, _v)
        }
    }

    getDataMap(): Map<string, Dota.CourierAbilityLevelUpConfigRecord> { return this._dataMap; }
    getDataList(): Dota.CourierAbilityLevelUpConfigRecord[] { return this._dataList; }

    get(key: string): Dota.CourierAbilityLevelUpConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class CourierAbilityLevelUpConfigRecord {

    constructor(_json_: any) {
        if (_json_.LevelId === undefined) { GLogHelper.error(1); }
        this.LevelId = _json_.LevelId
        if (_json_.PopulationRoof === undefined) { GLogHelper.error(1); }
        this.PopulationRoof = _json_.PopulationRoof
        if (_json_.PopuGoldCost === undefined) { GLogHelper.error(1); }
        this.PopuGoldCost = _json_.PopuGoldCost
        if (_json_.PopuWoodCost === undefined) { GLogHelper.error(1); }
        this.PopuWoodCost = _json_.PopuWoodCost
        if (_json_.TechExtraGood === undefined) { GLogHelper.error(1); }
        this.TechExtraGood = _json_.TechExtraGood
        if (_json_.TechExtraWood === undefined) { GLogHelper.error(1); }
        this.TechExtraWood = _json_.TechExtraWood
        if (_json_.TechExtraSoulCrystal === undefined) { GLogHelper.error(1); }
        this.TechExtraSoulCrystal = _json_.TechExtraSoulCrystal
        if (_json_.TechGoldcost === undefined) { GLogHelper.error(1); }
        this.TechGoldcost = _json_.TechGoldcost
        if (_json_.AutoGoldGetGold === undefined) { GLogHelper.error(1); }
        this.AutoGoldGetGold = _json_.AutoGoldGetGold
        if (_json_.AutoGoldGetWood === undefined) { GLogHelper.error(1); }
        this.AutoGoldGetWood = _json_.AutoGoldGetWood
        if (_json_.ChallengeGoldCost === undefined) { GLogHelper.error(1); }
        this.ChallengeGoldCost = _json_.ChallengeGoldCost
        if (_json_.ChallengeWoodCost === undefined) { GLogHelper.error(1); }
        this.ChallengeWoodCost = _json_.ChallengeWoodCost
        if (_json_.ChallengeEquipCost === undefined) { GLogHelper.error(1); }
        this.ChallengeEquipCost = _json_.ChallengeEquipCost
        if (_json_.ChallengeArtifactCost === undefined) { GLogHelper.error(1); }
        this.ChallengeArtifactCost = _json_.ChallengeArtifactCost
    }

    /**
     * 主键
     */
    readonly LevelId: string
    /**
     * 人口升级额外人口上限
     */
    readonly PopulationRoof: number
    /**
     * 人口升级金币消耗
     */
    readonly PopuGoldCost: number
    /**
     * 人口升级木材消耗
     */
    readonly PopuWoodCost: number
    /**
     * 科技升级额外金币每阶段
     */
    readonly TechExtraGood: number
    /**
     * 科技升级额外木材每阶段
     */
    readonly TechExtraWood: number
    /**
     * 科技升级额外魂晶每阶段
     */
    readonly TechExtraSoulCrystal: number
    /**
     * 科技升级升级金币消耗
     */
    readonly TechGoldcost: number
    /**
     * 发现宝藏金币
     */
    readonly AutoGoldGetGold: number
    /**
     * 发现宝藏木材
     */
    readonly AutoGoldGetWood: number
    /**
     * 金币挑战升级消耗
     */
    readonly ChallengeGoldCost: number
    /**
     * 木材挑战升级消耗
     */
    readonly ChallengeWoodCost: number
    /**
     * 装备挑战升级消耗
     */
    readonly ChallengeEquipCost: number
    /**
     * 神器挑战升级消耗
     */
    readonly ChallengeArtifactCost: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class CombinationConfig{
    private _dataMap: Map<string, Dota.CombinationConfigRecord>
    private _dataList: Dota.CombinationConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.CombinationConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.CombinationConfigRecord
            _v = new Dota.CombinationConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, Dota.CombinationConfigRecord> { return this._dataMap; }
    getDataList(): Dota.CombinationConfigRecord[] { return this._dataList; }

    get(key: string): Dota.CombinationConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class CombinationConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.SectName === undefined) { GLogHelper.error(1); }
        this.SectName = _json_.SectName
        if (_json_.SectIcon === undefined) { GLogHelper.error(1); }
        this.SectIcon = _json_.SectIcon
        if (_json_.SectId === undefined) { GLogHelper.error(1); }
        this.SectId = _json_.SectId
        if (_json_.index === undefined) { GLogHelper.error(1); }
        this.index = _json_.index
        if (_json_.SectLevel === undefined) { GLogHelper.error(1); }
        this.SectLevel = _json_.SectLevel
        if (_json_.active_count === undefined) { GLogHelper.error(1); }
        this.activeCount = _json_.active_count
        if (_json_.acitve_common_effect === undefined) { GLogHelper.error(1); }
        this.acitveCommonEffect = _json_.acitve_common_effect
        if (_json_.acitve_special_effect === undefined) { GLogHelper.error(1); }
        this.acitveSpecialEffect = _json_.acitve_special_effect
        if (_json_.heroid === undefined) { GLogHelper.error(1); }
        this.heroid = _json_.heroid
        if (_json_.Abilityid === undefined) { GLogHelper.error(1); }
        this.Abilityid = _json_.Abilityid
        if (_json_.Equipid === undefined) { GLogHelper.error(1); }
        this.Equipid = _json_.Equipid
    }

    /**
     * 效果id
     */
    readonly id: string
    /**
     * 羁绊名称
     */
    readonly SectName: string
    /**
     * 羁绊icon
     */
    readonly SectIcon: string
    /**
     * 羁绊id
     */
    readonly SectId: string
    /**
     * 羁绊索引
     */
    readonly index: number
    /**
     * 羁绊等级
     */
    readonly SectLevel: string
    /**
     * 羁绊激活数量
     */
    readonly activeCount: number
    /**
     * 激活时通用词条
     */
    readonly acitveCommonEffect: string
    /**
     * 激活时特殊词条
     */
    readonly acitveSpecialEffect: string
    /**
     * 羁绊对应英雄id
     */
    readonly heroid: string
    /**
     * 羁绊对应技能道具ID
     */
    readonly Abilityid: string
    /**
     * 激活所需符石id
     */
    readonly Equipid: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class PoolConfig{
    private _dataMap: Map<string, Dota.PoolConfigRecord>
    private _dataList: Dota.PoolConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.PoolConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.PoolConfigRecord
            _v = new Dota.PoolConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.poolid, _v)
        }
    }

    getDataMap(): Map<string, Dota.PoolConfigRecord> { return this._dataMap; }
    getDataList(): Dota.PoolConfigRecord[] { return this._dataList; }

    get(key: string): Dota.PoolConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class PoolConfigRecord {

    constructor(_json_: any) {
        if (_json_.poolid === undefined) { GLogHelper.error(1); }
        this.poolid = _json_.poolid
        if (_json_.poolItemCount === undefined) { GLogHelper.error(1); }
        this.poolItemCount = _json_.poolItemCount
        if (_json_.PoolInfo === undefined) { GLogHelper.error(1); }
        { this.PoolInfo = []; for(let _ele of _json_.PoolInfo) { let _e : Dota.PoolInfoBean; _e = new Dota.PoolInfoBean(_ele); this.PoolInfo.push(_e);}}
    }

    /**
     * 池子id
     */
    readonly poolid: string
    /**
     * 随机数量
     */
    readonly poolItemCount: number
    readonly PoolInfo: Dota.PoolInfoBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.PoolInfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class PoolInfoBean {

    constructor(_json_: any) {
        if (_json_.ItemConfigId === undefined) { GLogHelper.error(1); }
        this.ItemConfigId = _json_.ItemConfigId
        if (_json_.ItemCount === undefined) { GLogHelper.error(1); }
        this.ItemCount = _json_.ItemCount
        if (_json_.ItemWeight === undefined) { GLogHelper.error(1); }
        this.ItemWeight = _json_.ItemWeight
        if (_json_.IsVaild === undefined) { GLogHelper.error(1); }
        this.IsVaild = _json_.IsVaild
    }

    /**
     * 道具索引
     */
    readonly ItemConfigId: string
    /**
     * 道具数量
     */
    readonly ItemCount: number
    /**
     * 道具权重
     */
    readonly ItemWeight: number
    /**
     * 是否启用
     */
    readonly IsVaild: boolean

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class PoolGroupConfig{
    private _dataMap: Map<string, Dota.PoolGroupConfigRecord>
    private _dataList: Dota.PoolGroupConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.PoolGroupConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.PoolGroupConfigRecord
            _v = new Dota.PoolGroupConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.poolgroupid, _v)
        }
    }

    getDataMap(): Map<string, Dota.PoolGroupConfigRecord> { return this._dataMap; }
    getDataList(): Dota.PoolGroupConfigRecord[] { return this._dataList; }

    get(key: string): Dota.PoolGroupConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class PoolGroupConfigRecord {

    constructor(_json_: any) {
        if (_json_.poolgroupid === undefined) { GLogHelper.error(1); }
        this.poolgroupid = _json_.poolgroupid
        if (_json_.PoolGroup === undefined) { GLogHelper.error(1); }
        { this.PoolGroup = []; for(let _ele of _json_.PoolGroup) { let _e : Dota.PoolGroupBean; _e = new Dota.PoolGroupBean(_ele); this.PoolGroup.push(_e);}}
    }

    /**
     * 池子组id
     */
    readonly poolgroupid: string
    readonly PoolGroup: Dota.PoolGroupBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.PoolGroup) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class PoolGroupBean {

    constructor(_json_: any) {
        if (_json_.PoolConfigId === undefined) { GLogHelper.error(1); }
        this.PoolConfigId = _json_.PoolConfigId
        if (_json_.PoolWeight === undefined) { GLogHelper.error(1); }
        this.PoolWeight = _json_.PoolWeight
        if (_json_.IsVaild === undefined) { GLogHelper.error(1); }
        this.IsVaild = _json_.IsVaild
    }

    /**
     * 池子索引
     */
    readonly PoolConfigId: string
    /**
     * 池子权重
     */
    readonly PoolWeight: number
    /**
     * 是否有效
     */
    readonly IsVaild: boolean

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class PublicShopConfig{
    private _dataMap: Map<string, Dota.PublicShopConfigRecord>
    private _dataList: Dota.PublicShopConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.PublicShopConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.PublicShopConfigRecord
            _v = new Dota.PublicShopConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, Dota.PublicShopConfigRecord> { return this._dataMap; }
    getDataList(): Dota.PublicShopConfigRecord[] { return this._dataList; }

    get(key: string): Dota.PublicShopConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class PublicShopConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.sellinfo === undefined) { GLogHelper.error(1); }
        { this.sellinfo = []; for(let _ele of _json_.sellinfo) { let _e : Dota.PublicShopSellItemBean; _e = new Dota.PublicShopSellItemBean(_ele); this.sellinfo.push(_e);}}
    }

    /**
     * 商店类型
     */
    readonly id: string
    readonly sellinfo: Dota.PublicShopSellItemBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.sellinfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class PublicShopSellItemBean {

    constructor(_json_: any) {
        if (_json_.ItemSlot === undefined) { GLogHelper.error(1); }
        this.ItemSlot = _json_.ItemSlot
        if (_json_.ItemName === undefined) { GLogHelper.error(1); }
        this.ItemName = _json_.ItemName
        if (_json_.ItemLimit === undefined) { GLogHelper.error(1); }
        this.ItemLimit = _json_.ItemLimit
        if (_json_.RoundLock === undefined) { GLogHelper.error(1); }
        this.RoundLock = _json_.RoundLock
        if (_json_.MinDifficulty === undefined) { GLogHelper.error(1); }
        this.MinDifficulty = _json_.MinDifficulty
    }

    /**
     * 商品槽位
     */
    readonly ItemSlot: number
    /**
     * 商品ID或者随机池
     */
    readonly ItemName: string
    /**
     * 商品限购数量
     */
    readonly ItemLimit: number
    /**
     * 回合数解锁
     */
    readonly RoundLock: number
    /**
     * 难度下限
     */
    readonly MinDifficulty: number

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class WearableConfig{
    private _dataMap: Map<string, Dota.WearableConfigRecord>
    private _dataList: Dota.WearableConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.WearableConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.WearableConfigRecord
            _v = new Dota.WearableConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, Dota.WearableConfigRecord> { return this._dataMap; }
    getDataList(): Dota.WearableConfigRecord[] { return this._dataList; }

    get(key: string): Dota.WearableConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class WearableConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.name === undefined) { GLogHelper.error(1); }
        this.name = _json_.name
        if (_json_.prefab === undefined) { GLogHelper.error(1); }
        this.prefab = _json_.prefab
        if (_json_.image_inventory === undefined) { GLogHelper.error(1); }
        this.imageInventory = _json_.image_inventory
        if (_json_.item_description === undefined) { GLogHelper.error(1); }
        this.itemDescription = _json_.item_description
        if (_json_.item_name === undefined) { GLogHelper.error(1); }
        this.itemName = _json_.item_name
        if (_json_.Rarity === undefined) { GLogHelper.error(1); }
        this.Rarity = _json_.Rarity
        if (_json_.item_rarity === undefined) { GLogHelper.error(1); }
        this.itemRarity = _json_.item_rarity
        if (_json_.used_by_heroes === undefined) { GLogHelper.error(1); }
        this.usedByHeroes = _json_.used_by_heroes
        if (_json_.bundle === undefined) { GLogHelper.error(1); }
        this.bundle = _json_.bundle
    }

    /**
     * 主键
     */
    readonly id: string
    /**
     * 名称
     */
    readonly name: string
    /**
     * 类型
     */
    readonly prefab: string
    /**
     * icon
     */
    readonly imageInventory: string
    /**
     * 描述
     */
    readonly itemDescription: string
    /**
     * 饰品名称
     */
    readonly itemName: string
    /**
     * 饰品稀有度
     */
    readonly Rarity: string
    /**
     * 饰品稀有度
     */
    readonly itemRarity: string
    /**
     * 使用英雄
     */
    readonly usedByHeroes: string
    /**
     * 礼包内道具
     */
    readonly bundle: string[]

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class RoundBoardConfig{
    private _dataMap: Map<string, Dota.RoundBoardConfigRecord>
    private _dataList: Dota.RoundBoardConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.RoundBoardConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.RoundBoardConfigRecord
            _v = new Dota.RoundBoardConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, Dota.RoundBoardConfigRecord> { return this._dataMap; }
    getDataList(): Dota.RoundBoardConfigRecord[] { return this._dataList; }

    get(key: string): Dota.RoundBoardConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class RoundBoardConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.round_index === undefined) { GLogHelper.error(1); }
        this.roundIndex = _json_.round_index
        if (_json_.round_nextid === undefined) { GLogHelper.error(1); }
        this.roundNextid = _json_.round_nextid
        if (_json_.round_type === undefined) { GLogHelper.error(1); }
        this.roundType = _json_.round_type
        if (_json_.round_label === undefined) { GLogHelper.error(1); }
        this.roundLabel = _json_.round_label
        if (_json_.rankScore === undefined) { GLogHelper.error(1); }
        this.rankScore = _json_.rankScore
        if (_json_.randomEnemy === undefined) { GLogHelper.error(1); }
        this.randomEnemy = _json_.randomEnemy
        if (_json_.roundprize_gold === undefined) { GLogHelper.error(1); }
        this.roundprizeGold = _json_.roundprize_gold
        if (_json_.roundprize_wood === undefined) { GLogHelper.error(1); }
        this.roundprizeWood = _json_.roundprize_wood
        if (_json_.round_readytime === undefined) { GLogHelper.error(1); }
        this.roundReadytime = _json_.round_readytime
        if (_json_.round_time === undefined) { GLogHelper.error(1); }
        this.roundTime = _json_.round_time
        if (_json_.enemyinfo === undefined) { GLogHelper.error(1); }
        { this.enemyinfo = []; for(let _ele of _json_.enemyinfo) { let _e : Dota.RoundEnemyConfigBean; _e = new Dota.RoundEnemyConfigBean(_ele); this.enemyinfo.push(_e);}}
    }

    /**
     * 回合编号
     */
    readonly id: string
    /**
     * 回合显示数
     */
    readonly roundIndex: number
    /**
     * 下一回合编号
     */
    readonly roundNextid: string
    /**
     * 回合类型
     */
    readonly roundType: string
    /**
     * 回合标签
     */
    readonly roundLabel: string
    /**
     * 天梯分数
     */
    readonly rankScore: number
    /**
     * 是否随机敌人
     */
    readonly randomEnemy: boolean
    /**
     * 奖励金币
     */
    readonly roundprizeGold: number
    /**
     * 奖励木材
     */
    readonly roundprizeWood: number
    /**
     * 回合准备时间
     */
    readonly roundReadytime: number
    /**
     * 回合持续时间
     */
    readonly roundTime: number
    readonly enemyinfo: Dota.RoundEnemyConfigBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.enemyinfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class RoundEnemyConfigBean {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.unitname === undefined) { GLogHelper.error(1); }
        this.unitname = _json_.unitname
        if (_json_.star === undefined) { GLogHelper.error(1); }
        this.star = _json_.star
        if (_json_.level === undefined) { GLogHelper.error(1); }
        this.level = _json_.level
        if (_json_.unit_weight === undefined) { GLogHelper.error(1); }
        this.unitWeight = _json_.unit_weight
        if (_json_.position_x === undefined) { GLogHelper.error(1); }
        this.positionX = _json_.position_x
        if (_json_.position_y === undefined) { GLogHelper.error(1); }
        this.positionY = _json_.position_y
        if (_json_.angles_x === undefined) { GLogHelper.error(1); }
        this.anglesX = _json_.angles_x
        if (_json_.angles_y === undefined) { GLogHelper.error(1); }
        this.anglesY = _json_.angles_y
        if (_json_.angles_z === undefined) { GLogHelper.error(1); }
        this.anglesZ = _json_.angles_z
        if (_json_.enemycreatetype === undefined) { GLogHelper.error(1); }
        this.enemycreatetype = _json_.enemycreatetype
        if (_json_.isground === undefined) { GLogHelper.error(1); }
        this.isground = _json_.isground
        if (_json_.atkpect === undefined) { GLogHelper.error(1); }
        this.atkpect = _json_.atkpect
        if (_json_.hppect === undefined) { GLogHelper.error(1); }
        this.hppect = _json_.hppect
        if (_json_.phyarmpect === undefined) { GLogHelper.error(1); }
        this.phyarmpect = _json_.phyarmpect
        if (_json_.magicarmpect === undefined) { GLogHelper.error(1); }
        this.magicarmpect = _json_.magicarmpect
        if (_json_.gold_min === undefined) { GLogHelper.error(1); }
        this.goldMin = _json_.gold_min
        if (_json_.gold_max === undefined) { GLogHelper.error(1); }
        this.goldMax = _json_.gold_max
        if (_json_.wood_min === undefined) { GLogHelper.error(1); }
        this.woodMin = _json_.wood_min
        if (_json_.wood_max === undefined) { GLogHelper.error(1); }
        this.woodMax = _json_.wood_max
        if (_json_.soulcrystal_min === undefined) { GLogHelper.error(1); }
        this.soulcrystalMin = _json_.soulcrystal_min
        if (_json_.soulcrystal_max === undefined) { GLogHelper.error(1); }
        this.soulcrystalMax = _json_.soulcrystal_max
        if (_json_.elite_drop_index === undefined) { GLogHelper.error(1); }
        this.eliteDropIndex = _json_.elite_drop_index
        if (_json_.spawn_buff === undefined) { GLogHelper.error(1); }
        this.spawnBuff = _json_.spawn_buff
    }

    /**
     * 索引
     */
    readonly id: string
    /**
     * 回合单位名
     */
    readonly unitname: string
    /**
     * 星级
     */
    readonly star: number
    /**
     * 等级
     */
    readonly level: number
    /**
     * 随机权重
     */
    readonly unitWeight: number
    /**
     * 位置x[0-7]
     */
    readonly positionX: number
    /**
     * 位置y[1-9]
     */
    readonly positionY: number
    /**
     * 朝向x
     */
    readonly anglesX: number
    /**
     * 朝向y
     */
    readonly anglesY: number
    /**
     * 朝向z
     */
    readonly anglesZ: number
    /**
     * 怪物创建类型
     */
    readonly enemycreatetype: EEnum.EEnemyCreateType
    /**
     * 是否在地面上
     */
    readonly isground: number
    /**
     * 回合攻击系数
     */
    readonly atkpect: number
    /**
     * 回合血量系数
     */
    readonly hppect: number
    /**
     * 回合蓝量系数
     */
    readonly phyarmpect: number
    /**
     * 物理护甲系数
     */
    readonly magicarmpect: number
    /**
     * 单个怪物击杀金币min
     */
    readonly goldMin: number
    /**
     * 单个怪物击杀金币max
     */
    readonly goldMax: number
    /**
     * 单个怪物击杀木材min
     */
    readonly woodMin: number
    /**
     * 单个怪物击杀木材max
     */
    readonly woodMax: number
    /**
     * 单个怪物击杀魂晶min
     */
    readonly soulcrystalMin: number
    /**
     * 单个怪物击杀魂晶max
     */
    readonly soulcrystalMax: number
    /**
     * 精英怪掉落池编号
     */
    readonly eliteDropIndex: string
    /**
     * 单位自带buff
     */
    readonly spawnBuff: string

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class RoundBoardChallengeConfig{
    private _dataMap: Map<string, Dota.RoundBoardChallengeConfigRecord>
    private _dataList: Dota.RoundBoardChallengeConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.RoundBoardChallengeConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.RoundBoardChallengeConfigRecord
            _v = new Dota.RoundBoardChallengeConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, Dota.RoundBoardChallengeConfigRecord> { return this._dataMap; }
    getDataList(): Dota.RoundBoardChallengeConfigRecord[] { return this._dataList; }

    get(key: string): Dota.RoundBoardChallengeConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class RoundBoardChallengeConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.round_type === undefined) { GLogHelper.error(1); }
        this.roundType = _json_.round_type
        if (_json_.round_label === undefined) { GLogHelper.error(1); }
        this.roundLabel = _json_.round_label
        if (_json_.enemy_count === undefined) { GLogHelper.error(1); }
        this.enemyCount = _json_.enemy_count
        if (_json_.enemyinfo === undefined) { GLogHelper.error(1); }
        { this.enemyinfo = []; for(let _ele of _json_.enemyinfo) { let _e : Dota.RoundChallengeEnemyConfigBean; _e = new Dota.RoundChallengeEnemyConfigBean(_ele); this.enemyinfo.push(_e);}}
    }

    /**
     * 回合编号
     */
    readonly id: string
    /**
     * 回合类型
     */
    readonly roundType: string
    /**
     * 回合标签
     */
    readonly roundLabel: string
    /**
     * 创建的非召唤类怪物数量
     */
    readonly enemyCount: number
    readonly enemyinfo: Dota.RoundChallengeEnemyConfigBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.enemyinfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class RoundChallengeEnemyConfigBean {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.challengelevel === undefined) { GLogHelper.error(1); }
        this.challengelevel = _json_.challengelevel
        if (_json_.unitname === undefined) { GLogHelper.error(1); }
        this.unitname = _json_.unitname
        if (_json_.star === undefined) { GLogHelper.error(1); }
        this.star = _json_.star
        if (_json_.level === undefined) { GLogHelper.error(1); }
        this.level = _json_.level
        if (_json_.unit_weight === undefined) { GLogHelper.error(1); }
        this.unitWeight = _json_.unit_weight
        if (_json_.position_x === undefined) { GLogHelper.error(1); }
        this.positionX = _json_.position_x
        if (_json_.position_y === undefined) { GLogHelper.error(1); }
        this.positionY = _json_.position_y
        if (_json_.angles_x === undefined) { GLogHelper.error(1); }
        this.anglesX = _json_.angles_x
        if (_json_.angles_y === undefined) { GLogHelper.error(1); }
        this.anglesY = _json_.angles_y
        if (_json_.angles_z === undefined) { GLogHelper.error(1); }
        this.anglesZ = _json_.angles_z
        if (_json_.enemycreatetype === undefined) { GLogHelper.error(1); }
        this.enemycreatetype = _json_.enemycreatetype
        if (_json_.isground === undefined) { GLogHelper.error(1); }
        this.isground = _json_.isground
        if (_json_.atkpect === undefined) { GLogHelper.error(1); }
        this.atkpect = _json_.atkpect
        if (_json_.hppect === undefined) { GLogHelper.error(1); }
        this.hppect = _json_.hppect
        if (_json_.phyarmpect === undefined) { GLogHelper.error(1); }
        this.phyarmpect = _json_.phyarmpect
        if (_json_.magicarmpect === undefined) { GLogHelper.error(1); }
        this.magicarmpect = _json_.magicarmpect
        if (_json_.gold_min === undefined) { GLogHelper.error(1); }
        this.goldMin = _json_.gold_min
        if (_json_.gold_max === undefined) { GLogHelper.error(1); }
        this.goldMax = _json_.gold_max
        if (_json_.wood_min === undefined) { GLogHelper.error(1); }
        this.woodMin = _json_.wood_min
        if (_json_.wood_max === undefined) { GLogHelper.error(1); }
        this.woodMax = _json_.wood_max
        if (_json_.soulcrystal_min === undefined) { GLogHelper.error(1); }
        this.soulcrystalMin = _json_.soulcrystal_min
        if (_json_.soulcrystal_max === undefined) { GLogHelper.error(1); }
        this.soulcrystalMax = _json_.soulcrystal_max
        if (_json_.elite_drop_index === undefined) { GLogHelper.error(1); }
        this.eliteDropIndex = _json_.elite_drop_index
        if (_json_.spawn_buff === undefined) { GLogHelper.error(1); }
        this.spawnBuff = _json_.spawn_buff
    }

    /**
     * 种怪索引
     */
    readonly id: string
    /**
     * 挑战等级
     */
    readonly challengelevel: number
    /**
     * 回合单位名
     */
    readonly unitname: string
    /**
     * 星级
     */
    readonly star: number
    /**
     * 等级
     */
    readonly level: number
    /**
     * 随机权重
     */
    readonly unitWeight: number
    /**
     * 位置x[0-7]
     */
    readonly positionX: number
    /**
     * 位置y[1-9]
     */
    readonly positionY: number
    /**
     * 朝向x
     */
    readonly anglesX: number
    /**
     * 朝向y
     */
    readonly anglesY: number
    /**
     * 朝向z
     */
    readonly anglesZ: number
    /**
     * 怪物创建类型
     */
    readonly enemycreatetype: EEnum.EEnemyCreateType
    /**
     * 是否在地面上
     */
    readonly isground: boolean
    /**
     * 回合攻击系数
     */
    readonly atkpect: number
    /**
     * 回合血量系数
     */
    readonly hppect: number
    /**
     * 回合蓝量系数
     */
    readonly phyarmpect: number
    /**
     * 物理护甲系数
     */
    readonly magicarmpect: number
    /**
     * 单个怪物击杀金币min
     */
    readonly goldMin: number
    /**
     * 单个怪物击杀金币max
     */
    readonly goldMax: number
    /**
     * 单个怪物击杀木材min
     */
    readonly woodMin: number
    /**
     * 单个怪物击杀木材max
     */
    readonly woodMax: number
    /**
     * 单个怪物击杀魂晶min
     */
    readonly soulcrystalMin: number
    /**
     * 单个怪物击杀魂晶max
     */
    readonly soulcrystalMax: number
    /**
     * 精英怪掉落池编号
     */
    readonly eliteDropIndex: string
    /**
     * 单位自带buff
     */
    readonly spawnBuff: string

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace Dota {
export class RoundEnemyPoolConfig{
    private _dataMap: Map<string, Dota.RoundEnemyPoolConfigRecord>
    private _dataList: Dota.RoundEnemyPoolConfigRecord[]
    constructor(_json_: any[]) {
 this._dataMap  = new Map<string, Dota.RoundEnemyPoolConfigRecord>()
        this._dataList = []
        for(let _json2_ of _json_) {
            let _v: Dota.RoundEnemyPoolConfigRecord
            _v = new Dota.RoundEnemyPoolConfigRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, Dota.RoundEnemyPoolConfigRecord> { return this._dataMap; }
    getDataList(): Dota.RoundEnemyPoolConfigRecord[] { return this._dataList; }

    get(key: string): Dota.RoundEnemyPoolConfigRecord | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(let v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace Dota {
export class RoundEnemyPoolConfigRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { GLogHelper.error(1); }
        this.id = _json_.id
        if (_json_.playername === undefined) { GLogHelper.error(1); }
        this.playername = _json_.playername
        if (_json_.accountid === undefined) { GLogHelper.error(1); }
        this.accountid = _json_.accountid
        if (_json_.population === undefined) { GLogHelper.error(1); }
        this.population = _json_.population
        if (_json_.round_min === undefined) { GLogHelper.error(1); }
        this.roundMin = _json_.round_min
        if (_json_.round_max === undefined) { GLogHelper.error(1); }
        this.roundMax = _json_.round_max
        if (_json_.battlescore === undefined) { GLogHelper.error(1); }
        this.battlescore = _json_.battlescore
        if (_json_.sectinfo === undefined) { GLogHelper.error(1); }
        this.sectinfo = _json_.sectinfo
        if (_json_.enemyinfo === undefined) { GLogHelper.error(1); }
        { this.enemyinfo = []; for(let _ele of _json_.enemyinfo) { let _e : Dota.RoundDrawEnemyConfigBean; _e = new Dota.RoundDrawEnemyConfigBean(_ele); this.enemyinfo.push(_e);}}
    }

    /**
     * 阵容编号
     */
    readonly id: string
    /**
     * 玩家名称
     */
    readonly playername: string
    /**
     * accountid
     */
    readonly accountid: string
    /**
     * 人口数
     */
    readonly population: number
    /**
     * 匹配最小回合
     */
    readonly roundMin: number
    /**
     * 匹配最大回合
     */
    readonly roundMax: number
    /**
     * 战力
     */
    readonly battlescore: number
    /**
     * 羁绊详情
     */
    readonly sectinfo: string[]
    readonly enemyinfo: Dota.RoundDrawEnemyConfigBean[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.enemyinfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}



export namespace Dota {
export class RoundDrawEnemyConfigBean {

    constructor(_json_: any) {
        if (_json_.unitname === undefined) { GLogHelper.error(1); }
        this.unitname = _json_.unitname
        if (_json_.star === undefined) { GLogHelper.error(1); }
        this.star = _json_.star
        if (_json_.level === undefined) { GLogHelper.error(1); }
        this.level = _json_.level
        if (_json_.position_x === undefined) { GLogHelper.error(1); }
        this.positionX = _json_.position_x
        if (_json_.position_y === undefined) { GLogHelper.error(1); }
        this.positionY = _json_.position_y
        if (_json_.itemslot1 === undefined) { GLogHelper.error(1); }
        this.itemslot1 = _json_.itemslot1
        if (_json_.itemslot2 === undefined) { GLogHelper.error(1); }
        this.itemslot2 = _json_.itemslot2
        if (_json_.itemslot3 === undefined) { GLogHelper.error(1); }
        this.itemslot3 = _json_.itemslot3
        if (_json_.itemslot4 === undefined) { GLogHelper.error(1); }
        this.itemslot4 = _json_.itemslot4
        if (_json_.itemslot5 === undefined) { GLogHelper.error(1); }
        this.itemslot5 = _json_.itemslot5
        if (_json_.itemslot6 === undefined) { GLogHelper.error(1); }
        this.itemslot6 = _json_.itemslot6
        if (_json_.WearBundleId === undefined) { GLogHelper.error(1); }
        this.WearBundleId = _json_.WearBundleId
        if (_json_.spawn_buff === undefined) { GLogHelper.error(1); }
        this.spawnBuff = _json_.spawn_buff
    }

    /**
     * 回合单位名
     */
    readonly unitname: string
    /**
     * 星级
     */
    readonly star: number
    /**
     * 等级
     */
    readonly level: number
    /**
     * 位置x[0-7]
     */
    readonly positionX: number
    /**
     * 位置y[1-9]
     */
    readonly positionY: number
    /**
     * 物品栏1
     */
    readonly itemslot1: string
    /**
     * 物品栏2
     */
    readonly itemslot2: string
    /**
     * 物品栏3
     */
    readonly itemslot3: string
    /**
     * 物品栏4
     */
    readonly itemslot4: string
    /**
     * 物品栏5
     */
    readonly itemslot5: string
    /**
     * 物品栏6
     */
    readonly itemslot6: string
    /**
     * 套装Id
     */
    readonly WearBundleId: string
    /**
     * 单位自带buff
     */
    readonly spawnBuff: string

    resolve(_tables: Map<string, any>) {
    }
}

}


type JsonLoader = (file: string) => any

export class Tables {
    private _ItemConfig: Item.ItemConfig
    get ItemConfig(): Item.ItemConfig  { return this._ItemConfig;}
    private _ItemEquipConfig: Item.ItemEquipConfig
    get ItemEquipConfig(): Item.ItemEquipConfig  { return this._ItemEquipConfig;}
    private _ItemBuffConfig: Item.ItemBuffConfig
    get ItemBuffConfig(): Item.ItemBuffConfig  { return this._ItemBuffConfig;}
    private _ItemPrizePoolConfig: Item.ItemPrizePoolConfig
    get ItemPrizePoolConfig(): Item.ItemPrizePoolConfig  { return this._ItemPrizePoolConfig;}
    private _ItemPrizePoolGroupConfig: Item.ItemPrizePoolGroupConfig
    get ItemPrizePoolGroupConfig(): Item.ItemPrizePoolGroupConfig  { return this._ItemPrizePoolGroupConfig;}
    private _ShopConfig: Shop.ShopConfig
    get ShopConfig(): Shop.ShopConfig  { return this._ShopConfig;}
    private _SeasonConfig: Season.SeasonConfig
    get SeasonConfig(): Season.SeasonConfig  { return this._SeasonConfig;}
    private _RankPrizeConfig: Rank.RankPrizeConfig
    get RankPrizeConfig(): Rank.RankPrizeConfig  { return this._RankPrizeConfig;}
    private _DrawTreasureConfig: Draw.DrawTreasureConfig
    get DrawTreasureConfig(): Draw.DrawTreasureConfig  { return this._DrawTreasureConfig;}
    private _AchievementConfig: Achievement.AchievementConfig
    get AchievementConfig(): Achievement.AchievementConfig  { return this._AchievementConfig;}
    private _TitleConfig: Title.TitleConfig
    get TitleConfig(): Title.TitleConfig  { return this._TitleConfig;}
    private _GlobalSetting: Glob.GlobalSetting
    get GlobalSetting(): Glob.GlobalSetting  { return this._GlobalSetting;}
    private _BuildingLevelUpConfig: Dota.BuildingLevelUpConfig
    get BuildingLevelUpConfig(): Dota.BuildingLevelUpConfig  { return this._BuildingLevelUpConfig;}
    private _BuildingLevelUpExpConfig: Dota.BuildingLevelUpExpConfig
    get BuildingLevelUpExpConfig(): Dota.BuildingLevelUpExpConfig  { return this._BuildingLevelUpExpConfig;}
    private _PropConfig: Dota.PropConfig
    get PropConfig(): Dota.PropConfig  { return this._PropConfig;}
    private _PropRandomConfig: Dota.PropRandomConfig
    get PropRandomConfig(): Dota.PropRandomConfig  { return this._PropRandomConfig;}
    private _BattlePassChargeConfig: Dota.BattlePassChargeConfig
    get BattlePassChargeConfig(): Dota.BattlePassChargeConfig  { return this._BattlePassChargeConfig;}
    private _BattlePassTaskConfig: Dota.BattlePassTaskConfig
    get BattlePassTaskConfig(): Dota.BattlePassTaskConfig  { return this._BattlePassTaskConfig;}
    private _BattlePassLevelUpConfig: Dota.BattlePassLevelUpConfig
    get BattlePassLevelUpConfig(): Dota.BattlePassLevelUpConfig  { return this._BattlePassLevelUpConfig;}
    private _InfoPassLevelUpConfig: Dota.InfoPassLevelUpConfig
    get InfoPassLevelUpConfig(): Dota.InfoPassLevelUpConfig  { return this._InfoPassLevelUpConfig;}
    private _BuffEffectConfig: Dota.BuffEffectConfig
    get BuffEffectConfig(): Dota.BuffEffectConfig  { return this._BuffEffectConfig;}
    private _CourierAbilityLevelUpConfig: Dota.CourierAbilityLevelUpConfig
    get CourierAbilityLevelUpConfig(): Dota.CourierAbilityLevelUpConfig  { return this._CourierAbilityLevelUpConfig;}
    private _CombinationConfig: Dota.CombinationConfig
    get CombinationConfig(): Dota.CombinationConfig  { return this._CombinationConfig;}
    private _PoolConfig: Dota.PoolConfig
    get PoolConfig(): Dota.PoolConfig  { return this._PoolConfig;}
    private _PoolGroupConfig: Dota.PoolGroupConfig
    get PoolGroupConfig(): Dota.PoolGroupConfig  { return this._PoolGroupConfig;}
    private _PublicShopConfig: Dota.PublicShopConfig
    get PublicShopConfig(): Dota.PublicShopConfig  { return this._PublicShopConfig;}
    private _WearableConfig: Dota.WearableConfig
    get WearableConfig(): Dota.WearableConfig  { return this._WearableConfig;}
    private _RoundBoardConfig: Dota.RoundBoardConfig
    get RoundBoardConfig(): Dota.RoundBoardConfig  { return this._RoundBoardConfig;}
    private _RoundBoardChallengeConfig: Dota.RoundBoardChallengeConfig
    get RoundBoardChallengeConfig(): Dota.RoundBoardChallengeConfig  { return this._RoundBoardChallengeConfig;}
    private _RoundEnemyPoolConfig: Dota.RoundEnemyPoolConfig
    get RoundEnemyPoolConfig(): Dota.RoundEnemyPoolConfig  { return this._RoundEnemyPoolConfig;}

    constructor(loader: JsonLoader) {
        let tables = new Map<string, any>()
        this._ItemConfig = new Item.ItemConfig(loader('item_itemconfig'))
        tables.set('Item.ItemConfig', this._ItemConfig)
        this._ItemEquipConfig = new Item.ItemEquipConfig(loader('item_itemequipconfig'))
        tables.set('Item.ItemEquipConfig', this._ItemEquipConfig)
        this._ItemBuffConfig = new Item.ItemBuffConfig(loader('item_itembuffconfig'))
        tables.set('Item.ItemBuffConfig', this._ItemBuffConfig)
        this._ItemPrizePoolConfig = new Item.ItemPrizePoolConfig(loader('item_itemprizepoolconfig'))
        tables.set('Item.ItemPrizePoolConfig', this._ItemPrizePoolConfig)
        this._ItemPrizePoolGroupConfig = new Item.ItemPrizePoolGroupConfig(loader('item_itemprizepoolgroupconfig'))
        tables.set('Item.ItemPrizePoolGroupConfig', this._ItemPrizePoolGroupConfig)
        this._ShopConfig = new Shop.ShopConfig(loader('shop_shopconfig'))
        tables.set('Shop.ShopConfig', this._ShopConfig)
        this._SeasonConfig = new Season.SeasonConfig(loader('season_seasonconfig'))
        tables.set('Season.SeasonConfig', this._SeasonConfig)
        this._RankPrizeConfig = new Rank.RankPrizeConfig(loader('rank_rankprizeconfig'))
        tables.set('Rank.RankPrizeConfig', this._RankPrizeConfig)
        this._DrawTreasureConfig = new Draw.DrawTreasureConfig(loader('draw_drawtreasureconfig'))
        tables.set('Draw.DrawTreasureConfig', this._DrawTreasureConfig)
        this._AchievementConfig = new Achievement.AchievementConfig(loader('achievement_achievementconfig'))
        tables.set('Achievement.AchievementConfig', this._AchievementConfig)
        this._TitleConfig = new Title.TitleConfig(loader('title_titleconfig'))
        tables.set('Title.TitleConfig', this._TitleConfig)
        this._GlobalSetting = new Glob.GlobalSetting(loader('glob_globalsetting'))
        tables.set('Glob.GlobalSetting', this._GlobalSetting)
        this._BuildingLevelUpConfig = new Dota.BuildingLevelUpConfig(loader('dota_buildinglevelupconfig'))
        tables.set('Dota.BuildingLevelUpConfig', this._BuildingLevelUpConfig)
        this._BuildingLevelUpExpConfig = new Dota.BuildingLevelUpExpConfig(loader('dota_buildinglevelupexpconfig'))
        tables.set('Dota.BuildingLevelUpExpConfig', this._BuildingLevelUpExpConfig)
        this._PropConfig = new Dota.PropConfig(loader('dota_propconfig'))
        tables.set('Dota.PropConfig', this._PropConfig)
        this._PropRandomConfig = new Dota.PropRandomConfig(loader('dota_proprandomconfig'))
        tables.set('Dota.PropRandomConfig', this._PropRandomConfig)
        this._BattlePassChargeConfig = new Dota.BattlePassChargeConfig(loader('dota_battlepasschargeconfig'))
        tables.set('Dota.BattlePassChargeConfig', this._BattlePassChargeConfig)
        this._BattlePassTaskConfig = new Dota.BattlePassTaskConfig(loader('dota_battlepasstaskconfig'))
        tables.set('Dota.BattlePassTaskConfig', this._BattlePassTaskConfig)
        this._BattlePassLevelUpConfig = new Dota.BattlePassLevelUpConfig(loader('dota_battlepasslevelupconfig'))
        tables.set('Dota.BattlePassLevelUpConfig', this._BattlePassLevelUpConfig)
        this._InfoPassLevelUpConfig = new Dota.InfoPassLevelUpConfig(loader('dota_infopasslevelupconfig'))
        tables.set('Dota.InfoPassLevelUpConfig', this._InfoPassLevelUpConfig)
        this._BuffEffectConfig = new Dota.BuffEffectConfig(loader('dota_buffeffectconfig'))
        tables.set('Dota.BuffEffectConfig', this._BuffEffectConfig)
        this._CourierAbilityLevelUpConfig = new Dota.CourierAbilityLevelUpConfig(loader('dota_courierabilitylevelupconfig'))
        tables.set('Dota.CourierAbilityLevelUpConfig', this._CourierAbilityLevelUpConfig)
        this._CombinationConfig = new Dota.CombinationConfig(loader('dota_combinationconfig'))
        tables.set('Dota.CombinationConfig', this._CombinationConfig)
        this._PoolConfig = new Dota.PoolConfig(loader('dota_poolconfig'))
        tables.set('Dota.PoolConfig', this._PoolConfig)
        this._PoolGroupConfig = new Dota.PoolGroupConfig(loader('dota_poolgroupconfig'))
        tables.set('Dota.PoolGroupConfig', this._PoolGroupConfig)
        this._PublicShopConfig = new Dota.PublicShopConfig(loader('dota_publicshopconfig'))
        tables.set('Dota.PublicShopConfig', this._PublicShopConfig)
        this._WearableConfig = new Dota.WearableConfig(loader('dota_wearableconfig'))
        tables.set('Dota.WearableConfig', this._WearableConfig)
        this._RoundBoardConfig = new Dota.RoundBoardConfig(loader('dota_roundboardconfig'))
        tables.set('Dota.RoundBoardConfig', this._RoundBoardConfig)
        this._RoundBoardChallengeConfig = new Dota.RoundBoardChallengeConfig(loader('dota_roundboardchallengeconfig'))
        tables.set('Dota.RoundBoardChallengeConfig', this._RoundBoardChallengeConfig)
        this._RoundEnemyPoolConfig = new Dota.RoundEnemyPoolConfig(loader('dota_roundenemypoolconfig'))
        tables.set('Dota.RoundEnemyPoolConfig', this._RoundEnemyPoolConfig)

        this._ItemConfig.resolve(tables)
        this._ItemEquipConfig.resolve(tables)
        this._ItemBuffConfig.resolve(tables)
        this._ItemPrizePoolConfig.resolve(tables)
        this._ItemPrizePoolGroupConfig.resolve(tables)
        this._ShopConfig.resolve(tables)
        this._SeasonConfig.resolve(tables)
        this._RankPrizeConfig.resolve(tables)
        this._DrawTreasureConfig.resolve(tables)
        this._AchievementConfig.resolve(tables)
        this._TitleConfig.resolve(tables)
        this._GlobalSetting.resolve(tables)
        this._BuildingLevelUpConfig.resolve(tables)
        this._BuildingLevelUpExpConfig.resolve(tables)
        this._PropConfig.resolve(tables)
        this._PropRandomConfig.resolve(tables)
        this._BattlePassChargeConfig.resolve(tables)
        this._BattlePassTaskConfig.resolve(tables)
        this._BattlePassLevelUpConfig.resolve(tables)
        this._InfoPassLevelUpConfig.resolve(tables)
        this._BuffEffectConfig.resolve(tables)
        this._CourierAbilityLevelUpConfig.resolve(tables)
        this._CombinationConfig.resolve(tables)
        this._PoolConfig.resolve(tables)
        this._PoolGroupConfig.resolve(tables)
        this._PublicShopConfig.resolve(tables)
        this._WearableConfig.resolve(tables)
        this._RoundBoardConfig.resolve(tables)
        this._RoundBoardChallengeConfig.resolve(tables)
        this._RoundEnemyPoolConfig.resolve(tables)
    }
reloadConfig(k: string , loader: JsonLoader) {
 switch(k) { 
case ('item_itemconfig'):
        this._ItemConfig = new Item.ItemConfig(loader('item_itemconfig'));break;
case ('item_itemequipconfig'):
        this._ItemEquipConfig = new Item.ItemEquipConfig(loader('item_itemequipconfig'));break;
case ('item_itembuffconfig'):
        this._ItemBuffConfig = new Item.ItemBuffConfig(loader('item_itembuffconfig'));break;
case ('item_itemprizepoolconfig'):
        this._ItemPrizePoolConfig = new Item.ItemPrizePoolConfig(loader('item_itemprizepoolconfig'));break;
case ('item_itemprizepoolgroupconfig'):
        this._ItemPrizePoolGroupConfig = new Item.ItemPrizePoolGroupConfig(loader('item_itemprizepoolgroupconfig'));break;
case ('shop_shopconfig'):
        this._ShopConfig = new Shop.ShopConfig(loader('shop_shopconfig'));break;
case ('season_seasonconfig'):
        this._SeasonConfig = new Season.SeasonConfig(loader('season_seasonconfig'));break;
case ('rank_rankprizeconfig'):
        this._RankPrizeConfig = new Rank.RankPrizeConfig(loader('rank_rankprizeconfig'));break;
case ('draw_drawtreasureconfig'):
        this._DrawTreasureConfig = new Draw.DrawTreasureConfig(loader('draw_drawtreasureconfig'));break;
case ('achievement_achievementconfig'):
        this._AchievementConfig = new Achievement.AchievementConfig(loader('achievement_achievementconfig'));break;
case ('title_titleconfig'):
        this._TitleConfig = new Title.TitleConfig(loader('title_titleconfig'));break;
case ('glob_globalsetting'):
        this._GlobalSetting = new Glob.GlobalSetting(loader('glob_globalsetting'));break;
case ('dota_buildinglevelupconfig'):
        this._BuildingLevelUpConfig = new Dota.BuildingLevelUpConfig(loader('dota_buildinglevelupconfig'));break;
case ('dota_buildinglevelupexpconfig'):
        this._BuildingLevelUpExpConfig = new Dota.BuildingLevelUpExpConfig(loader('dota_buildinglevelupexpconfig'));break;
case ('dota_propconfig'):
        this._PropConfig = new Dota.PropConfig(loader('dota_propconfig'));break;
case ('dota_proprandomconfig'):
        this._PropRandomConfig = new Dota.PropRandomConfig(loader('dota_proprandomconfig'));break;
case ('dota_battlepasschargeconfig'):
        this._BattlePassChargeConfig = new Dota.BattlePassChargeConfig(loader('dota_battlepasschargeconfig'));break;
case ('dota_battlepasstaskconfig'):
        this._BattlePassTaskConfig = new Dota.BattlePassTaskConfig(loader('dota_battlepasstaskconfig'));break;
case ('dota_battlepasslevelupconfig'):
        this._BattlePassLevelUpConfig = new Dota.BattlePassLevelUpConfig(loader('dota_battlepasslevelupconfig'));break;
case ('dota_infopasslevelupconfig'):
        this._InfoPassLevelUpConfig = new Dota.InfoPassLevelUpConfig(loader('dota_infopasslevelupconfig'));break;
case ('dota_buffeffectconfig'):
        this._BuffEffectConfig = new Dota.BuffEffectConfig(loader('dota_buffeffectconfig'));break;
case ('dota_courierabilitylevelupconfig'):
        this._CourierAbilityLevelUpConfig = new Dota.CourierAbilityLevelUpConfig(loader('dota_courierabilitylevelupconfig'));break;
case ('dota_combinationconfig'):
        this._CombinationConfig = new Dota.CombinationConfig(loader('dota_combinationconfig'));break;
case ('dota_poolconfig'):
        this._PoolConfig = new Dota.PoolConfig(loader('dota_poolconfig'));break;
case ('dota_poolgroupconfig'):
        this._PoolGroupConfig = new Dota.PoolGroupConfig(loader('dota_poolgroupconfig'));break;
case ('dota_publicshopconfig'):
        this._PublicShopConfig = new Dota.PublicShopConfig(loader('dota_publicshopconfig'));break;
case ('dota_wearableconfig'):
        this._WearableConfig = new Dota.WearableConfig(loader('dota_wearableconfig'));break;
case ('dota_roundboardconfig'):
        this._RoundBoardConfig = new Dota.RoundBoardConfig(loader('dota_roundboardconfig'));break;
case ('dota_roundboardchallengeconfig'):
        this._RoundBoardChallengeConfig = new Dota.RoundBoardChallengeConfig(loader('dota_roundboardchallengeconfig'));break;
case ('dota_roundenemypoolconfig'):
        this._RoundEnemyPoolConfig = new Dota.RoundEnemyPoolConfig(loader('dota_roundenemypoolconfig'));break;
}
};

}
